{"version":3,"sources":["utils/index.jsx","graphalgorithms/dijkstra/addedge.js","graphalgorithms/dijkstra/addnode.js","graphalgorithms/dijkstra/deleteedge.js","graphalgorithms/dijkstra/deletenode.js","graphalgorithms/dijkstra/solvecontrols.js","graphalgorithms/dijkstra/priorityqueue.js","graphalgorithms/dijkstra/solvedijkstra.js","graphalgorithms/dijkstra/network.js","utils/Navbar.js","graphalgorithms/dijkstra/dijkstra.js","graphalgorithms/prims/addedge.js","graphalgorithms/prims/addnode.js","graphalgorithms/prims/deleteedge.js","graphalgorithms/prims/deletenode.js","graphalgorithms/prims/solvecontrols.js","graphalgorithms/prims/priorityqueue.js","graphalgorithms/prims/solveprims.js","graphalgorithms/prims/network.js","graphalgorithms/prims/prims.js","graphalgorithms/dfs/addedge.js","graphalgorithms/dfs/node.js","graphalgorithms/dfs/deleteedge.js","graphalgorithms/dfs/delete.js","graphalgorithms/dfs/solve.js","graphalgorithms/dfs/network.js","graphalgorithms/dfs/dfs.js","graphalgorithms/bfs/addedge.js","graphalgorithms/bfs/node.js","graphalgorithms/bfs/deleteedge.js","graphalgorithms/bfs/delete.js","graphalgorithms/bfs/solve.js","graphalgorithms/bfs/network.js","graphalgorithms/bfs/bfs.js","sortingalgorithms/helpers.js","sortingalgorithms/bubblesort/BubbleSort.js","sortingalgorithms/utils/Bar/index.js","sortingalgorithms/utils/SortChart/index.js","sortingalgorithms/utils/VisualizerControls/index.js","sortingalgorithms/bubblesort/visualizer.js","sortingalgorithms/bubblesort/sort.js","sortingalgorithms/selectionsort/SelectionSort.js","sortingalgorithms/selectionsort/visualizer.js","sortingalgorithms/selectionsort/sort.js","sortingalgorithms/insertionsort/InsertionSort.js","sortingalgorithms/insertionsort/visualizer.js","sortingalgorithms/insertionsort/sort.js","sortingalgorithms/mergesort/MergeSort.js","sortingalgorithms/mergesort/visualizer.js","sortingalgorithms/mergesort/sort.js","sortingalgorithms/quicksort/QuickSort.js","sortingalgorithms/quicksort/visualizer.js","sortingalgorithms/quicksort/sort.js","sortingalgorithms/quicksort3/QuickSort3.js","sortingalgorithms/quicksort3/visualizer.js","sortingalgorithms/quicksort3/sort.js","sortingalgorithms/heapsort/HeapSort.js","sortingalgorithms/heapsort/visualizer.js","sortingalgorithms/heapsort/sort.js","sortingalgorithms/shellsort/ShellSort.js","sortingalgorithms/shellsort/visualizer.js","sortingalgorithms/shellsort/sort.js","graphalgorithms/Binarytree/addnode.js","graphalgorithms/Binarytree/findnode.js","graphalgorithms/Binarytree/deletenode.js","graphalgorithms/Binarytree/solvecontrols.js","graphalgorithms/Binarytree/network.js","graphalgorithms/Binarytree/BinaryTree.js","binarySearch/arrayTile.jsx","binarySearch/binarySearch.jsx","binarySearch/randomIntFromInterval.js","binarySearch/searchingAlgorithms.js","graphalgorithms/kruskals/addedge.js","graphalgorithms/kruskals/node.js","graphalgorithms/kruskals/deleteedge.js","graphalgorithms/kruskals/delete.js","graphalgorithms/kruskals/solve.js","graphalgorithms/kruskals/priorityqueue.js","graphalgorithms/kruskals/solvekrushkal.js","graphalgorithms/kruskals/network.js","graphalgorithms/kruskals/kruskals.js","App.js","index.js"],"names":["IndexTable","props","state","href","Icon","name","size","style","position","right","class","marginTop","to","React","Component","Addedge","useState","from","setFrom","setTo","w","setW","Container","Input","value","onChange","e","target","placeholder","type","Button","disabled","onClick","edge","label","onAddedge","Addnode","node","setnode","Node","id","onAddnode","alert","message","color","Deleteedge","onDeleteedge","Deletenode","setid","onDeletenode","Solve","start","setstart","time","settime","min","max","step","className","solving","loading","solve","children","distance","this","PriorityQueue","values","index1","index2","temp","index","length","parentIndex","Math","floor","swap","push","bubbleUp","i","elementPriority","leftChildIndex","rightChildIndex","leftChildPriority","rightChildPriority","indexToSwap","dist","console","log","poppedNode","pop","bubbleDown","findIndex","table","getconnectededges","edges","bi","connectededges","j","resetNetwork","network","nodes","forEach","update","width","Navbar","text","fluid","Menu","attached","inverted","Dropdown","item","icon","simple","Item","Style","navbar","textAlign","fontSize","fontFamily","sleep","ms","Promise","resolve","setTimeout","graph","Toggle","Radio","s","checked","toggle","Dijkstra","ref","useRef","sol","setsol","setbi","setsolving","ColorArray","V","setV","Grid","padded","celled","container","doubling","Row","stackable","columns","divided","Column","mobile","computer","val","current","Network","setOptions","smooth","arrows","enabled","Divider","add","ed","remove","a","deletenode","b","addedge","bool","deleteedge","PQ","map","Infinity","previous","enqueue","nextnode","dequeue","get","ind","parseInt","has","replace","solveDijkstra","t","n","toString","join","Segment","height","rel","options","interaction","hover","manipulation","addNode","addEdge","editEdge","deleteNode","deleteEdge","layout","hierarchical","Table","Cell","Label","ribbon","Body","bgcolor","includes","Prims","solvePrims","Dfs","path","Path","setpath","Arr","isvisited","reverse","slice","Bfs","autoResize","randomSeed","undefined","improvedLayout","levelSeparation","nodeSpacing","treeSpacing","edgeMinimization","parentCentralization","direction","sortMethod","shakeTowards","shift","newTrace","array","groupA","groupB","groupC","groupD","sortedIndices","addToTrace","trace","lastSorted","tmp","createRange","end","Array","keys","elem","BubbleSort","nums","Bar","stateA","stateB","stateC","stateD","sorted","classNames","BarStyle","SortChart","numbers","maxNum","num","margin","key","marginRight","getListOfBars","VisualizerControls","onPlay","onPause","onBackward","onForward","playing","Visualizer","traceStep","originalArray","timeoutIds","colour1","colour2","speed","reset","setState","clearTimeouts","timeoutId","clearTimeout","changeVisualState","visualState","Number","changespeed","input","pause","continue","run","timer","prevState","stepForward","stepBackward","prevProps","bind","labelPosition","Sort","arraySize","randomize","fill","random","createTrace","changesize","SelectionSort","minIndex","InsertionSort","hole","colour3","MergeSort","recursiveMergeSort","original","midPoint","mid","left","k","merge","color1","color2","color3","color4","color5","color6","color7","comp","QuickSort","recursiveQuickSort","pivot","choosePivot","partition","color0","QuickSort3","recursiveQuickSort3","pivot_elements","pivotStart","pivotEnd","colour4","colour5","HeapSort","maxHeapify","heapsize","leftChild","rightChild","largest","BuildMaxHeap","heapSort","ShellSort","gap","Findnode","onFind","root","Binarytree","data","setdata","root_data","updata","newdata","prev","len","dir","delid","tnode","lnode","tenode","ArrayTile","idx","ArrStyle","NUMBER_OF_ARRAY_BARS","BinarySearch","found","elementFoundAt","msgAfterExecution","previousLength","animations","resetArray","prevArray","document","getElementsByClassName","getElementById","backgroundColor","classList","sortedArray","sort","arrayTiles","transition","count","binarySearchAnimations","element","resetAllTiles","hightlightWithinBounds","Header","as","Group","horizontal","binarySearch","UnionFind","elements","parent","rootA","find","rootB","union","Kruskals","edgeQueue","node_ids","uf","nodes_pq","connected","nextEdge","App","exact","component","Index","binarysearchtree","styleLink","createElement","head","appendChild","ReactDOM","render"],"mappings":"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","file":"static/js/main.9f31698f.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./bootstrap.min.css\";\nimport './index.css';\nimport { Icon } from 'semantic-ui-react';\nexport default class IndexTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <a href='https://github.com/harsha-p/visualizer'>\n                    <Icon name='github' size='huge' style={{ position: 'absolute', right: 0 }} />\n                </a>\n                <div class=\"ui grid stackable container\" style={{ marginTop: 10 }}>\n                    <div class=\"three wide column\" >\n                        <NavLink to=\"/binarysearch\">\n                            <p class=\"link\">\n                                Binary Search\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/dijkstra\">\n                            <p class=\"link\">\n                                Dijkstra's algorithm\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/prims\">\n                            <p class=\"link\">\n                                Prim's algorithm\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/dfs\">\n                            <p class=\"link\">\n                                Depth First Search\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/bfs\">\n                            <p class=\"link\">\n                                Breadth First Search\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/krushkal\">\n                            <p class=\"link\">\n                                Krushkal's algorithm\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/binarysearchtree\">\n                            <p class=\"link\">\n                                Binary Search Tree\n                            </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/bubblesort\">\n                            <p class=\"link\">\n                                Bubble Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/selectionsort\">\n                            <p class=\"link\">\n                                Selection Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/insertionsort\">\n                            <p class=\"link\">\n                                Insertion Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/mergesort\">\n                            <p class=\"link\">\n                                Merge Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/quicksort\">\n                            <p class=\"link\">\n                                Quick Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/quicksort3\">\n                            <p class=\"link\">\n                                Quick Sort3\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/shellsort\">\n                            <p class=\"link\">\n                                Shell Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                    <div class=\"three wide column\">\n                        <NavLink to=\"/heapsort\">\n                            <p class=\"link\">\n                                Heap Sort\n                        </p>\n                        </NavLink>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n    value={from}\n    onChange={(e) => setFrom(e.target.value)}\n    placeholder=\"From\"\n    />\n            <Input\n    value={to}\n    onChange={(e) => setTo(e.target.value)}\n    placeholder=\"To\"\n    />\n            <Input\n    value={w}\n    onChange={(e) => setW(e.target.value)}\n    placeholder=\"Capacity\"\n    type=\"number\"\n    />\n            <Button\n                disabled={!from || !to | !w}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n\n                    props.onAddedge(edge);\n                }}\n            >\n                Add Edge\n        </Button>\n        </Container >\n    );\n};\nexport default Addedge;","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" />\n            <Button disabled={!node} onClick={() => {\n                const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Deleteedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            />\n            <Input\n    value={to}\n    onChange={(e) => setTo(e.target.value)}\n    placeholder=\"To\"\n    />\n            <Input\n    value={w}\n    onChange={(e) => setW(e.target.value)}\n    placeholder=\"Capacity\"\n    type=\"number\"\n    />\n            <Button\n                disabled={!from || !to | !w | w < 0}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n                    props.onDeleteedge(edge);\n                }}\n            >\n                Delete Edge\n        </Button>\n        </Container>\n    );\n};\nexport default Deleteedge;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}/>\n            <Button color='red' disabled={!id} onClick={() => {\n                try {\n                    props.onDeletenode(id);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    const [start, setstart] = useState(\"1\");\n    // const [end, setend] = useState(\"5\");\n    const [time, settime] = useState(0.5);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n    value={time}\n    min={0.5} max={5} step={0.5}\n    placeholder=\"s\" type=\"range\"\n    onChange={(e) => settime(e.target.value)}/>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Input value={start} placeholder=\"Start\" onChange={(e) => setstart(e.target.value)}/>\n            {/* <Input value={end} placeholder=\"End\" onChange={(e) => setend(e.target.value)}></Input> */}\n            <Button\n                disabled={!start || !time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(start, time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","class Node {\n    constructor(value, distance) {\n        this.value = value\n        this.distance = distance\n    }\n}\n\nclass PriorityQueue {\n\n    constructor() {\n        this.values = []\n    }\n\n    //helper method that swaps the values and two indexes of an array\n    swap(index1, index2) {\n        let temp = this.values[index1];\n        this.values[index1] = this.values[index2];\n        this.values[index2] = temp;\n        return this.values;\n    }\n    //helper methods that bubbles up values from end\n    bubbleUp() {\n        //get index of inserted element\n        let index = this.values.length - 1\n        //loop while index is not 0 or element no longer needs to bubble\n        while (index > 0) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    // method that pushes new value onto the end and calls the bubble helper\n    enqueue(value) {\n        this.values.push(value)\n        //calculate parent, if parent is greater swap\n        //while loop or recurse\n        this.bubbleUp();\n        return this.values\n    }\n    has(id) {\n        for (let i = 0; i < this.values.length; i++) {\n            // console.log(\"has check\", this.values[i], node);\n            if (this.values[i].value === id) return true;\n        }\n        return false;\n    }\n    bubbleDown() {\n        let parentIndex = 0;\n        const length = this.values.length;\n        const elementPriority = this.values[0].distance;\n        //loop breaks if no swaps are needed\n        while (true) {\n            //get indexes of child elements by following formula\n            let leftChildIndex = (2 * parentIndex) + 1;\n            let rightChildIndex = (2 * parentIndex) + 2;\n            let leftChildPriority, rightChildPriority;\n            let indexToSwap = null;\n            // if left child exists, and is greater than the element, plan to swap with the left child index\n            if (leftChildIndex < length) {\n                leftChildPriority = this.values[leftChildIndex].distance\n                if (leftChildPriority < elementPriority) {\n                    indexToSwap = leftChildIndex;\n                }\n            }\n            //if right child exists\n            if (rightChildIndex < length) {\n                rightChildPriority = this.values[rightChildIndex].distance\n\n                if (\n                    //if right child is greater than element and there are no plans to swap\n                    (rightChildPriority < elementPriority && indexToSwap === null) ||\n                    //OR if right child is greater than left child and there ARE plans to swap\n                    (rightChildPriority < leftChildPriority && indexToSwap !== null)) {\n                    //plan to swap with the right child\n                    indexToSwap = rightChildIndex\n                }\n            }\n            //if there are no plans to swap, break out of the loop\n            if (indexToSwap === null) {\n                break;\n            }\n            //swap with planned element\n            this.swap(parentIndex, indexToSwap);\n            //starting index is now index that we swapped with\n            parentIndex = indexToSwap;\n        }\n    }\n    replace(node, dist) {\n        let index = -1;\n        for (let i = 0; i < this.values.length; i++) {\n            if (this.values[i].value === node) {\n                index = i;\n                break ;\n            }\n        }\n        console.log(\"array pq\", this.values, node);\n        if (index < 0) return -1;\n        this.values[index].distance = dist;\n        while (index >= 1) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    dequeue() {\n        //swap first and last element\n        this.swap(0, this.values.length - 1);\n        //pop max value off of values\n        let poppedNode = this.values.pop();\n        //re-adjust heap if length is greater than 1\n        if (this.values.length > 1) {\n            this.bubbleDown();\n        }\n\n        return poppedNode;\n    }\n}\nexport { PriorityQueue, Node };","import { PriorityQueue, Node } from './priorityqueue';\n\nexport function findIndex(id, table) {\n    for (let i = 0; i < table.length; i++) {\n        if (table[i].id === id) {\n            return i;\n        }\n    }\n}\n\nexport function getconnectededges(id, edges, bi) {\n    let connectededges = [];\n    for (let j = 0; j < edges.length; j++) {\n        let edge = edges[j];\n        if (edge.from === id) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n        else if (edge.to === id && bi) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n    }\n    return connectededges;\n}\n\nexport function solveDijkstra(start, bi, network) {\n    let PQ = new PriorityQueue();\n    const state = network.nodes.map((node) => {\n        return {\n            id: node.id,\n            distance: node.id === start ? 0 : Infinity,\n            previous: node.id === start ? -1 : null,\n            edge: null,\n        };\n    });\n    for (let i = 0; i < state.length; i++) {\n        network.nodes.update({\n            id: state[i].id,\n            label: state[i].id + \":\" + state[i].distance,\n        });\n    }\n    PQ.enqueue(new Node(start, 0));\n    let node;\n    while (PQ.values.length >= 1) {\n        const nextnode = PQ.dequeue();\n        network.nodes.update({\n            id: nextnode.value,\n            color: \"orange\",\n        });\n        const connectededges = getconnectededges(nextnode.value, network.edges.get(), bi);\n        for (const ed of connectededges) {\n            if (ed.from === nextnode.value) node = ed.to;\n            else node = ed.from;\n            network.edges.update({\n                ...ed,\n                color: \"orange\",\n                width: 4,\n            });\n            const ind = findIndex(node, state);\n            let dist = parseInt(ed.label) + nextnode.distance;\n            console.log(\"includes\", node, PQ.has(node));\n            if (PQ.has(node) && state[ind].distance > dist) {\n                state[ind].previous = nextnode.value;\n                state[ind].distance = dist;\n                network.edges.update({\n                    ...state[ind].edge,\n                    width: 2,\n                    color: \"black\",\n                });\n                state[ind].edge = ed;\n                network.edges.update({\n                    ...ed,\n                    width: 3,\n                    color: \"green\",\n                });\n                network.nodes.update({\n                    id: state[ind].id,\n                    label: state[ind].id + \":\" + state[ind].distance,\n                });\n                PQ.replace(node, dist);\n            }\n            else if (state[ind].previous == null) {\n                state[ind].previous = nextnode.value;\n                state[ind].distance = dist;\n                state[ind].edge = ed;\n                network.edges.update({\n                    ...ed,\n                    width: 3,\n                    color: \"green\",\n                });\n                network.nodes.update({\n                    id: state[ind].id,\n                    label: state[ind].id + \":\" + state[ind].distance,\n                });\n                console.log(\"else if\");\n                PQ.enqueue(new Node(state[ind].id, state[ind].distance));\n            }\n            else {\n                network.edges.update({\n                    ...ed,\n                    // label: sum.toString(),\n                    width: 2,\n                    color: \"black\",\n                });\n            }\n        }\n        network.nodes.update({\n            id: nextnode.value,\n            color: null,\n        });\n    }\n    console.log(\"state\", state);\n}","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { Component } from 'react'\nimport { Dropdown, Icon, Menu, Container } from 'semantic-ui-react'\nimport { NavLink } from \"react-router-dom\";\nimport './'\n\nexport default class Navbar extends Component {\n    render() {\n        console.log(\"text\", this.props.text);\n        return (\n            <Container fluid>\n                {/* <br /> */}\n                {/* <Grid width={2}> */}\n                <Menu attached='bottom' inverted >\n                    <Dropdown item icon='bars' simple>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>\n                                <NavLink to=\"/binarysearch\">\n                                    <p className=\"text-dark thumb-title\">\n                                        Binary Search\n                                </p>\n                                </NavLink>\n                            </Dropdown.Item>\n                            <Dropdown.Item>\n                                <NavLink to=\"/dijkstra\">\n                                    <p className=\"text-dark thumb-title\">\n                                        Dijkstra's algorithm\n                                </p>\n                                </NavLink>\n                            </Dropdown.Item>\n                            <Dropdown.Item>\n\n                                <NavLink to=\"/prims\">\n                                    <p className=\"text-dark thumb-title\">\n                                        Prim's algorithm\n                                </p>\n                                </NavLink>\n                            </Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/dfs\">\n                                <p className=\"text-dark thumb-title\">\n                                    Depth First Search\n                                </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/bfs\">\n                                <p className=\"text-dark thumb-title\">\n                                    Breadth First Search\n                                </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/krushkal\">\n                                <p className=\"text-dark thumb-title\">\n                                    Krushkal's algorithm\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item>\n                                <NavLink to=\"/binarysearchtree\">\n                                    <p className=\"text-dark thumb-title\">\n                                        Binary Search Tree\n                                </p>\n                                </NavLink>\n                            </Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/bubblesort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Bubble Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/selectionsort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Selection Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/insertionsort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Insertion Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/mergesort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Merge Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/quicksort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Quick Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/quicksort3\">\n                                <p className=\"text-dark thumb-title\">\n                                    Quick Sort3\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item><NavLink to=\"/heapsort\">\n                                <p className=\"text-dark thumb-title\">\n                                    Heap Sort\n                            </p>\n                            </NavLink></Dropdown.Item>\n                            <Dropdown.Item>\n                                <NavLink to=\"/shellsort\">\n                                    <p className=\"text-dark thumb-title\">\n                                        Shell Sort\n                            </p>\n                                </NavLink>\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <NavLink to='/'>\n                        <Icon name='home' size='big' style={{ marginTop: 10 }}></Icon>\n                    </NavLink>\n                    <text style={Style.navbar}>{this.props.text}</text>\n                    <Menu.Menu position='right'>\n                        <div className='ui right aligned item'>\n                            <a href='https://github.com/harsha-p/visualizer' >\n                                <Icon name='github' size='large' />\n                            </a>\n                        </div>\n                    </Menu.Menu>\n                </Menu>\n                {/* </Grid> */}\n                <br />\n            </Container >\n        );\n    }\n}\n\nvar Style = ({\n    navbar: {\n        textAlign: 'center',\n        fontSize: 24,\n        marginTop: 10,\n        width: 1000,\n        color: 'white',\n        fontFamily: 'Roboto',\n    }\n});","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Segment, Radio, Table, Label } from \"semantic-ui-react\";\nimport Addedge from \"./addedge\";\nimport Addnode from \"./addnode\";\nimport Deleteedge from \"./deleteedge\";\nimport Deletenode from \"./deletenode\"\nimport Solve from \"./solvecontrols\";\nimport \"./dijkstra.css\";\nimport { solveDijkstra, getconnectededges, findIndex } from \"./solvedijkstra\";\nimport { addedge, deleteedge, deletenode, resetNetwork } from \"./network\";\nimport { PriorityQueue, Node } from './priorityqueue';\nimport Navbar from '../../utils/Navbar';\nexport function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n    nodes: [\n        { id: \"2\", label: \"2\" },\n        { id: \"3\", label: \"3\" },\n        { id: \"1\", label: \"1\" },\n        { id: \"4\", label: \"4\" },\n        { id: \"5\", label: \"5\" },\n    ],\n    edges: [\n        { from: \"1\", to: \"2\", label: \"6\" },\n        { from: \"1\", to: \"4\", label: \"1\" },\n        { from: \"2\", to: \"4\", label: \"2\" },\n        { from: \"2\", to: \"5\", label: \"1\" },\n        { from: \"4\", to: \"5\", label: \"1\" },\n        { from: \"5\", to: \"2\", label: \"2\" },\n        { from: \"3\", to: \"2\", label: \"5\" },\n        { from: \"5\", to: \"3\", label: \"5\" },\n    ]\n};\n\nconst Toggle = (props) => {\n    return (\n        <div>\n            <Radio\n                onChange={(e, s) => {\n                    props.onChange(s.checked);\n                }}\n                toggle\n                label=\"bidirectional\"\n            />\n        </div>\n    )\n};\n\n\nfunction Dijkstra() {\n    const ref = useRef();\n    const [sol, setsol] = useState(\"\");\n    const [bi, setbi] = useState(false);\n    const [solving, setsolving] = useState(false);\n    let ColorArray = [];\n    for (let i = 0; i < 8; i++) ColorArray.push('white');\n    ColorArray[7] = 'pink';\n    const [V, setV] = useState(\"\");\n    const options = {\n        interaction: { hover: true },\n        manipulation: {\n            enabled: true,\n            // initiallyActive: true,\n            addNode: false,\n            addEdge: false,\n            // editNode: true,\n            editEdge: true,\n            deleteNode: true,\n            deleteEdge: true,\n        },\n        layout: {\n            hierarchical: false,\n        },\n        edges: {\n            color: \"#000000\",\n            smooth: true,\n        },\n    };\n\n    return (\n        <Container fluid >\n            <Navbar text=\"Dijkstra's algorithm\" />\n            <Grid padded celled container doubling width='100hw'>\n                <Grid.Row stackable columns={3} divided >\n                    <Grid.Column mobile={16} computer={4}>\n                        <Toggle label=\"bidirectional\" onChange={(val) => {\n                            setbi(val);\n                            if (val) {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: false } },\n                                    },\n                                });\n                            } else {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: true } },\n                                    },\n                                });\n                            }\n                        }} />\n                        <Divider />\n                        <Addnode onAddnode={(node) => ref.current.nodes.add(node)} />\n                        <Divider />\n                        <Deletenode onDeletenode={(id) => { deletenode(id, ref.current); }} />\n\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={6} >\n                        <Addedge onAddedge={(edge) => { addedge(edge, ref.current, false); }} />\n                        <Divider />\n                        <Deleteedge onDeleteedge={(edge) => {\n                            deleteedge(edge, ref.current, bi);\n                        }} />\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={16}>\n                        <Solve solving={solving} solve={(start) => {\n                            setsolving(true);\n                            console.log(start, bi);\n                            resetNetwork(ref.current);\n                            solveDijkstra(\n                                start, bi, ref.current\n                            );\n                            setsolving(false);\n                        }} >Run Dijkstra</Solve>\n                        <Divider />\n                        <Solve\n                            solving={solving}\n                            time={true}\n                            solve={async (start, t) => {\n                                console.log(\"TIME\", t);\n                                setsolving(true);\n                                setV(1);\n                                resetNetwork(ref.current);\n                                let PQ = new PriorityQueue();\n                                const state = ref.current.nodes.map((node) => {\n                                    return {\n                                        id: node.id,\n                                        distance: node.id === start ? 0 : Infinity,\n                                        previous: node.id === start ? -1 : null,\n                                        edge: null,\n                                    };\n                                });\n                                for (let i = 0; i < state.length; i++) {\n                                    ref.current.nodes.update({\n                                        id: state[i].id,\n                                        label: state[i].id + \":\" + state[i].distance,\n                                    });\n                                }\n                                PQ.enqueue(new Node(start, 0));\n                                setsol(\n                                    \"Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                );\n                                await sleep(t * 1000);\n                                let node;\n                                setV(2);\n                                while (PQ.values.length >= 1) {\n                                    console.log(\"while\");\n                                    await sleep(t * 1000);\n                                    setV(3);\n                                    const nextnode = PQ.dequeue();\n                                    ref.current.nodes.update({\n                                        id: nextnode.value,\n                                        color: \"orange\",\n                                    });\n                                    setsol(\n                                        \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{ \" + n.distance.toString() + \" } \").join(\"<-\")\n                                    );\n                                    await sleep(t * 1000);\n                                    const connectededges = getconnectededges(nextnode.value, ref.current.edges.get(), bi);\n                                    for (const ed of connectededges) {\n                                        if (ed.from === nextnode.value) node = ed.to;\n                                        else node = ed.from;\n                                        ref.current.edges.update({\n                                            ...ed,\n                                            color: \"orange\",\n                                            width: 4,\n                                        });\n                                        const ind = findIndex(node, state);\n                                        setV(4);\n                                        console.log(\"for each\");\n                                        await sleep(t * 1000);\n                                        let dist = parseInt(ed.label) + nextnode.distance;\n                                        console.log(\"includes\", node.id, PQ.has(node));\n                                        if (PQ.has(node) && state[ind].distance > dist) {\n                                            setV(5);\n                                            state[ind].previous = nextnode.value;\n                                            state[ind].distance = dist;\n                                            ref.current.edges.update({\n                                                ...state[ind].edge,\n                                                width: 2,\n                                                color: \"black\",\n                                            });\n                                            state[ind].edge = ed;\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 3,\n                                                color: \"green\",\n                                            });\n                                            ref.current.nodes.update({\n                                                id: state[ind].id,\n                                                label: state[ind].id + \":\" + state[ind].distance,\n                                            });\n                                            console.log(\"if\");\n                                            PQ.replace(node, dist);\n                                            console.log(\"pq values\", PQ.values);\n                                            setsol(\n                                                \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        else if (state[ind].previous === null) {\n                                            setV(6);\n                                            state[ind].previous = nextnode.value;\n                                            state[ind].distance = dist;\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 3,\n                                                color: \"green\",\n                                            });\n                                            ref.current.nodes.update({\n                                                id: state[ind].id,\n                                                label: state[ind].id + \":\" + state[ind].distance,\n                                            });\n                                            console.log(\"else if\");\n                                            PQ.enqueue(new Node(state[ind].id, state[ind].distance));\n                                            setsol(\n                                                \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        else {\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 2,\n                                                color: \"black\",\n                                            });\n                                        }\n                                    }\n                                    ref.current.nodes.update({\n                                        id: nextnode.value,\n                                        color: null,\n                                    });\n                                    setV(2);\n                                }\n                                setV(7);\n                                setsolving(false);\n                            }}\n                        >\n                            Dijkstra Steps</Solve>\n                        <Divider />\n                        <Segment style={{ height: \"10vh\" }} >\n                            {sol}\n                        </Segment>\n\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2} >\n                    <Grid.Column computer={8} mobile={16}>\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\" />\n                        <Graph\n                            style={{ height: \"80vh\" }}\n                            graph={graph}\n                            options={options}\n                            ref={ref}\n                        />\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={8}>\n                        <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n                        <Table size='small' >\n                            <Table.Body >\n                                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 7) % 8]} >\n                                    <pre>{\"BEGIN\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 6) % 8]} >\n                                    <pre>{\"d(v[1])=0\\nfor i=2,3,4 ... n\"}</pre>\n                                    <pre>{\"\\td(v[i])=∞,prevoius(v[i])=NULL\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 5) % 8]} >\n                                    <pre>{\"while queue Q≠ ∅\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 8]} >\n                                    <pre>{\"\\tU = Q.min()\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 8]} >\n                                    <pre>{\"\\tfor all (U,V) ∈ EDGES E\\n\\t\\tdist = d(U) + l(U,V)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 8]} >\n                                    <pre>{\"\\t\\tif V ∈ Q AND d(V) > dist\"}</pre>\n                                    <pre>{\"\\t\\t\\td(V) = dist, previous(V)=U\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 8]} >\n                                    <pre>{\"\\t\\tElse if previous(V) == NULL\"}</pre>\n                                    <pre>{\"\\t\\t\\td(V) = dist, previous(V)=U\\n\\t\\tQ.insert(V,dist)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 8]} ><pre>{\"End\"}</pre> </Table.Cell></Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container >\n    );\n}\n\nexport default Dijkstra;\n","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n    value={from}\n    onChange={(e) => setFrom(e.target.value)}\n    placeholder=\"From\"\n    />\n            <Input\n    value={to}\n    onChange={(e) => setTo(e.target.value)}\n    placeholder=\"To\"\n    />\n            <Input\n    value={w}\n    onChange={(e) => setW(e.target.value)}\n    placeholder=\"Capacity\"\n    type=\"number\"\n    />\n            <Button\n                disabled={!from || !to | !w}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n\n                    props.onAddedge(edge);\n                }}\n            >\n                Add Edge\n        </Button>\n        </Container >\n    );\n};\nexport default Addedge;","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" />\n            <Button disabled={!node} onClick={() => {\n                const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Deleteedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n    value={from}\n    onChange={(e) => setFrom(e.target.value)}\n    placeholder=\"From\"\n    />\n            <Input\n    value={to}\n    onChange={(e) => setTo(e.target.value)}\n    placeholder=\"To\"\n    />\n            <Input\n    value={w}\n    onChange={(e) => setW(e.target.value)}\n    placeholder=\"Capacity\"\n    type=\"number\"\n    />\n            <Button\n                disabled={!from || !to | !w | w < 0}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n                    props.onDeleteedge(edge);\n                }}\n            >\n                Delete Edge\n        </Button>\n        </Container>\n    );\n};\nexport default Deleteedge;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}/>\n            <Button color='red' disabled={!id} onClick={() => {\n                try {\n                    props.onDeletenode(id);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    const [start, setstart] = useState(\"1\");\n    const [time, settime] = useState(1);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n                            value={time}\n                            min={1} max={10} step={1}\n                            placeholder=\"s\" type=\"range\"\n                            onChange={(e) => settime(e.target.value)}></input>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Input value={start} placeholder=\"Start\" onChange={(e) => setstart(e.target.value)}></Input>\n            <Button\n                disabled={!start || !time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(start, time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","class Node {\n    constructor(value, distance) {\n        this.value = value\n        this.distance = distance\n    }\n}\n\nclass PriorityQueue {\n\n    constructor() {\n        this.values = []\n    }\n\n    //helper method that swaps the values and two indexes of an array\n    swap(index1, index2) {\n        let temp = this.values[index1];\n        this.values[index1] = this.values[index2];\n        this.values[index2] = temp;\n        return this.values;\n    }\n    //helper methods that bubbles up values from end\n    bubbleUp() {\n        //get index of inserted element\n        let index = this.values.length - 1\n        //loop while index is not 0 or element no loger needs to bubble\n        while (index > 0) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    // method that pushes new value onto the end and calls the bubble helper\n    enqueue(value) {\n        this.values.push(value)\n        //calculate parent, if parent is greater swap\n        //while loop or recurse\n        this.bubbleUp();\n        return this.values\n    }\n    bubbleDown() {\n        let parentIndex = 0;\n        const length = this.values.length;\n        const elementPriority = this.values[0].distance;\n        //loop breaks if no swaps are needed\n        while (true) {\n            //get indexes of child elements by following formula\n            let leftChildIndex = (2 * parentIndex) + 1;\n            let rightChildIndex = (2 * parentIndex) + 2;\n            let leftChildPriority, rightChildPriority;\n            let indexToSwap = null;\n            // if left child exists, and is greater than the element, plan to swap with the left child index\n            if (leftChildIndex < length) {\n                leftChildPriority = this.values[leftChildIndex].distance\n                if (leftChildPriority < elementPriority) {\n                    indexToSwap = leftChildIndex;\n                }\n            }\n            //if right child exists\n            if (rightChildIndex < length) {\n                rightChildPriority = this.values[rightChildIndex].distance\n\n                if (\n                    //if right child is greater than element and there are no plans to swap\n                    (rightChildPriority < elementPriority && indexToSwap === null) ||\n                    //OR if right child is greater than left child and there ARE plans to swap\n                    (rightChildPriority < leftChildPriority && indexToSwap !== null)) {\n                    //plan to swap with the right child\n                    indexToSwap = rightChildIndex\n                }\n            }\n            //if there are no plans to swap, break out of the loop\n            if (indexToSwap === null) {\n                break;\n            }\n            //swap with planned element\n            this.swap(parentIndex, indexToSwap);\n            //starting index is now index that we swapped with\n            parentIndex = indexToSwap;\n        }\n    }\n    has(id) {\n        for (let i = 0; i < this.values.length; i++) {\n            // console.log(\"has check\", this.values[i], node);\n            if (this.values[i].value === id) return true;\n        }\n        return false;\n    }\n    replace(node, dist) {\n        let index = -1;\n        for (let i = 0; i < this.values.length; i++) {\n            if (this.values[i].value === node) { index = i; break };\n        }\n        console.log(\"array pq\", this.values, node);\n        if (index < 0) return -1;\n        this.values[index].distance = dist;\n        while (index > 0) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    dequeue() {\n        //swap first and last element\n        this.swap(0, this.values.length - 1);\n        //pop max value off of values\n        let poppedNode = this.values.pop();\n        //re-adjust heap if length is greater than 1\n        if (this.values.length > 1) {\n            this.bubbleDown();\n        }\n\n        return poppedNode;\n    }\n}\nexport { PriorityQueue, Node };","import { PriorityQueue, Node } from './priorityqueue';\n\nexport function findIndex(id, table) {\n    for (let i = 0; i < table.length; i++) {\n        if (table[i].id === id) {\n            return i;\n        }\n    }\n}\n\nexport function getconnectednodes(id, edges) {\n    let connectednodes = [];\n    for (let j = 0; j < edges.length; j++) {\n        let edge = edges[j];\n        if (edge.from === id) {\n            console.log(\"check\", connectednodes, connectednodes.includes(edge.to), edge.from, edge.to);\n            if (connectednodes.includes(edge.to)) continue;\n            connectednodes.push(edge.to);\n        }\n        else if (edge.to === id) {\n            console.log(\"check\", connectednodes, connectednodes.includes(edge.from), edge.from, edge.to);\n            if (connectednodes.includes(edge.from)) continue;\n            connectednodes.push(edge.from);\n        }\n    }\n    console.log(\"connected nodes\", id, connectednodes);\n    return connectednodes;\n}\n\nexport function getconnectededges(id, edges) {\n    let connectededges = [];\n    for (let j = 0; j < edges.length; j++) {\n        let edge = edges[j];\n        if (edge.from === id) {\n            if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n        else if (edge.to === id) {\n            if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n    }\n    return connectededges;\n}\n\nexport function solvePrims(nodes, edges, start, network) {\n    let PQ = new PriorityQueue();\n    const state = network.nodes.map((node) => {\n        return {\n            id: node.id,\n            distance: node.id === start ? 0 : Infinity,\n            previous: node.id === start ? start : null,\n            edge: null,\n        };\n    });\n    PQ.enqueue(new Node(start, 0));\n    let node;\n    while (PQ.values.length >= 1) {\n        const nextnode = PQ.dequeue();\n        network.nodes.update({\n            id: nextnode.value.toString(),\n            label: nextnode.value.toString(),\n            color: \"#ffa500\",\n        });\n        const connectededges = getconnectededges(nextnode.value, network.edges.get());\n        // console.log(connectednodes);\n        for (const ed of connectededges) {\n            if (ed.from === nextnode.value) node = ed.to;\n            else node = ed.from;\n            let ind = findIndex(node, state);\n            let color = ed.color;\n            network.edges.update({\n                ...ed,\n                width: 4,\n                color: \"#ffa500\",\n            });\n            let dist = parseInt(ed.label);\n            if (PQ.has(node) && state[ind].distance > dist) {\n                state[ind].previous = nextnode.value;\n                state[ind].distance = dist;\n                network.edges.update({\n                    ...state[ind].edge,\n                    width: null,\n                    color: null,\n                });\n                PQ.replace(node, dist);\n                network.edges.update({\n                    ...ed,\n                    width: 2,\n                    color: \"#00ff00\",\n                });\n                state[ind].edge = ed;\n            }\n            else if (state[ind].previous === null) {\n                PQ.enqueue(new Node(node, dist));\n                state[ind].previous = nextnode.value;\n                state[ind].distance = dist;\n                state[ind].edge = ed;\n                network.edges.update({\n                    ...ed,\n                    width: 2,\n                    color: \"#00ff00\",\n                });\n            }\n            else {\n                network.edges.update({\n                    ...ed,\n                    width: 2,\n                    color,\n                });\n            }\n        }\n        network.nodes.update({\n            id: nextnode.value.toString(),\n            label: nextnode.value.toString(),\n            color: \"#00ff00\",\n        });\n    }\n}\n","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Table, Segment, Label } from \"semantic-ui-react\";\nimport Addedge from \"./addedge\";\nimport Addnode from \"./addnode\";\nimport Deleteedge from \"./deleteedge\";\nimport Deletenode from \"./deletenode\"\nimport Solve from \"./solvecontrols\";\nimport \"./prims.css\";\nimport { solvePrims, getconnectededges, findIndex } from \"./solveprims\";\nimport { addedge, deleteedge, deletenode, resetNetwork } from \"./network\";\nimport { PriorityQueue, Node } from './priorityqueue';\nimport Navbar from '../../utils/Navbar';\nexport function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n    nodes: [\n        { id: \"2\", label: \"2\" },\n        { id: \"3\", label: \"3\" },\n        { id: \"1\", label: \"1\" },\n        { id: \"4\", label: \"4\" },\n        { id: \"5\", label: \"5\" },\n    ],\n    edges: [\n        { from: \"1\", to: \"2\", label: \"6\" },\n        { from: \"1\", to: \"4\", label: \"1\" },\n        { from: \"2\", to: \"4\", label: \"2\" },\n        { from: \"2\", to: \"5\", label: \"1\" },\n        { from: \"3\", to: \"2\", label: \"5\" },\n        { from: \"4\", to: \"5\", label: \"1\" },\n        { from: \"5\", to: \"3\", label: \"5\" },\n        { from: \"5\", to: \"2\", label: \"2\" },\n    ]\n};\n\nfunction Prims() {\n    const ref = useRef();\n    const [sol, setsol] = useState(\"\");\n    const [solving, setsolving] = useState(false);\n    let ColorArray = [];\n    for (let i = 0; i < 8; i++) ColorArray.push('white');\n    ColorArray[7] = 'pink';\n    const [V, setV] = useState(\"\");\n    const options = {\n        interaction: { hover: true },\n        manipulation: {\n            enabled: true,\n            addNode: false,\n            addEdge: false,\n            editEdge: true,\n            deleteNode: true,\n            deleteEdge: true,\n        },\n        layout: {\n            hierarchical: false,\n        },\n        edges: {\n            color: \"#000000\",\n            smooth: true,\n            width: 1,\n            arrows: { to: { enabled: false } },\n        },\n    };\n\n    return (\n        <Container fluid >\n            <Navbar text=\"Prim's algorithm\" />\n            <Grid padded celled container doubling width='100hw'>\n                <Grid.Row stackable=\"true\" columns={3} divided=\"true\">\n                    <Grid.Column mobile={16} computer={4}>\n                        <Addnode onAddnode={(node) => ref.current.nodes.add(node)} />\n                        <Divider />\n                        <Deletenode onDeletenode={(id) => { deletenode(id, ref.current); }} />\n\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={6} >\n                        <Addedge onAddedge={(edge) => { addedge(edge, ref.current, false); }} />\n                        <Divider />\n                        <Deleteedge onDeleteedge={(edge) => {\n                            deleteedge(edge, ref.current);\n                        }} />\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={16}>\n                        <Solve solving={solving} solve={(start) => {\n                            setsolving(true);\n                            resetNetwork(ref.current);\n                            solvePrims(\n                                ref.current.nodes.get(),\n                                ref.current.edges.get(),\n                                start, ref.current\n                            );\n                            setsolving(false);\n                        }} >Run Prims</Solve>\n                        <Divider />\n                        <Solve\n                            solving={solving}\n                            time={true}\n                            solve={async (start, t) => {\n                                setsolving(true);\n                                setV(1);\n                                resetNetwork(ref.current);\n                                let PQ = new PriorityQueue();\n                                const state = ref.current.nodes.map((node) => {\n                                    return {\n                                        id: node.id,\n                                        distance: node.id === start ? 0 : Infinity,\n                                        previous: node.id === start ? start : null,\n                                        edge: null,\n                                    };\n                                });\n                                PQ.enqueue(new Node(start, 0));\n                                setsol(\n                                    \"Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                );\n                                await sleep(t * 1000);\n                                setV(2);\n                                await sleep(t * 1000);\n                                let node;\n                                // console.log(\"start\", start);\n                                while (PQ.values.length >= 1) {\n                                    setV(3);\n                                    const nextnode = PQ.dequeue();\n                                    console.log(\"dequeue\", nextnode);\n                                    setsol(\n                                        \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                    );\n                                    ref.current.nodes.update({\n                                        id: nextnode.value.toString(),\n                                        label: nextnode.value.toString(),\n                                        color: \"#ffa500\",\n                                    });\n                                    await sleep(t * 1000);\n                                    setV(4);\n                                    const connectededges = getconnectededges(nextnode.value, ref.current.edges.get());\n                                    console.log(connectededges);\n                                    for (const ed of connectededges) {\n                                        if (ed.from === nextnode.value) node = ed.to;\n                                        else node = ed.from;\n                                        const ind = findIndex(node, state);\n                                        // let E = ref.current.edges.get();\n                                        // console.log(\"E\", E);\n                                        // setV(4);\n                                        let color = ed.color;\n                                        ref.current.edges.update({\n                                            ...ed,\n                                            width: 4,\n                                            color: \"#ffa500\",\n                                        });\n                                        console.log(\"values state nxtnode node ed\", state[ind], nextnode, node, ed);\n                                        setV(4);\n                                        await sleep(t * 1000);\n                                        let dist = parseInt(ed.label);\n                                        if (PQ.has(node) && state[ind].distance > dist) {\n                                            setV(5);\n                                            state[ind].previous = nextnode.value;\n                                            state[ind].distance = dist;\n                                            ref.current.edges.update({\n                                                ...state[ind].edge,\n                                                width: null,\n                                                color: null,\n                                            });\n                                            console.log(\"replace\", node, dist);\n                                            PQ.replace(node, dist);\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 2,\n                                                color: \"#00ff00\",\n                                            });\n                                            state[ind].edge = ed;\n                                            setsol(\n                                                \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        else if (state[ind].previous === null) {\n                                            setV(6);\n                                            console.log(\"enqueue\", node);\n                                            PQ.enqueue(new Node(node, dist));\n                                            state[ind].previous = nextnode.value;\n                                            state[ind].distance = dist;\n                                            state[ind].edge = ed;\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 2,\n                                                color: \"#00ff00\",\n                                            });\n                                            setsol(\n                                                \"U = \" + nextnode.value + \" Heap : \" + PQ.values.map((n) => n.value.toString() + \"{\" + n.distance.toString() + \"}\").join(\"<-\")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        else {\n                                            ref.current.edges.update({\n                                                ...ed,\n                                                width: 2,\n                                                color,\n                                            });\n                                        }\n                                    }\n                                    ref.current.nodes.update({\n                                        id: nextnode.value.toString(),\n                                        label: nextnode.value.toString(),\n                                        color: \"#00ff00\",\n                                    });\n                                    setV(2);\n                                    await sleep(t * 1000);\n                                }\n                                setV(7);\n                                setsolving(false);\n                            }}\n                        >\n                            Prims Steps</Solve>\n                        <Divider />\n                        <Segment style={{ height: \"10vh\" }} >\n                            {sol}\n                        </Segment>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2} >\n                    <Grid.Column computer={8} mobile={16}>\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\"></link>\n                        <Graph\n                            style={{ height: \"80vh\" }}\n                            graph={graph}\n                            options={options}\n                            ref={ref}\n                        />\n                        {sol && <Segment style={{ height: \"10vh\" }} color='green' inverted>{sol}</Segment>}\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={8}>\n                        <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n                        <Table size='small' >\n                            <Table.Body >\n                                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 7) % 8]} >\n                                    <pre>{\"BEGIN\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 6) % 8]} >\n                                    <pre>{\"d(v[i])=∞,previous(v[i])=NULL\\nfor i=1,3,4 ... n\\n\"}</pre>\n                                    <pre>{\"\\td(v[root])=∞,prevoius(v[root])=v[root]\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 5) % 8]} >\n                                    <pre>{\"while queue ≠ ∅\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 8]} >\n                                    <pre>{\"\\tU = queue.min()\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 8]} >\n                                    <pre>{\"\\tfor all (U,V) ∈ EDGES E\\n\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 8]} >\n                                    <pre>{\"\\t\\tif V ∈ queue AND d(V) > l(U,V)\"}</pre>\n                                    <pre>{\"\\t\\t\\td(V) = l(U,V), parent(V)=U\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 8]} >\n                                    <pre>{\"\\t\\tElse if parent(V) == NULL\"}</pre>\n                                    <pre>{\"\\t\\t\\td(V) = l(U,V), parent(V)=U\\n\\t\\t\\tqueue.insert(V,d(V))\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 8]} ><pre>{\"End\"}</pre> </Table.Cell></Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container >\n    );\n}\n\nexport default Prims;\n","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n\n                    props.onAddedge(edge);\n                }}\n            >\n                Add Edge\n        </Button>\n        </Container >\n    );\n};\nexport default Addedge;\n","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" ></Input>\n            <Button disabled={!node} onClick={() => {\n                const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Deleteedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w | w < 0}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n                    props.onDeleteedge(edge);\n                }}\n            >\n                Delete Edge\n        </Button>\n        </Container>\n    );\n};\nexport default Deleteedge;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}></Input>\n            <Button color='red' disabled={!id} onClick={() => {\n                try {\n                    props.onDeletenode(id);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    const [start, setstart] = useState(\"1\");\n    // const [end, setend] = useState(\"5\");\n    const [time, settime] = useState(0.5);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n                            value={time}\n                            min={0.5} max={5} step={0.5}\n                            placeholder=\"s\" type=\"range\"\n                            onChange={(e) => settime(e.target.value)}></input>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Input value={start} placeholder=\"Start\" onChange={(e) => setstart(e.target.value)}></Input>\n            {/* <Input value={end} placeholder=\"End\" onChange={(e) => setend(e.target.value)}></Input> */}\n            <Button\n                disabled={!start || !time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(start, time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Segment, Radio, Table, Label } from \"semantic-ui-react\";\nimport Addedge from \"./addedge\";\nimport Addnode from \"./node\";\nimport Deleteedge from \"./deleteedge\";\nimport Deletenode from \"./delete\"\nimport Solve from \"./solve\";\nimport { addedge, deleteedge, deletenode, resetNetwork } from \"./network\";\nimport './dfs.css';\nimport Navbar from '../../utils/Navbar';\n\nexport function getconnectededges(id, edges, bi) {\n    let connectededges = [];\n    for (let j = 0; j < edges.length; j++) {\n        let edge = edges[j];\n        if (edge.from === id) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n        else if (edge.to === id && bi) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n    }\n    return connectededges;\n}\n\n\nexport function findIndex(id, table) {\n    console.log(\"id t\", id, table);\n    for (let i = 0; i < table.length; i++) {\n        if (table[i].id === id) {\n            return i;\n        }\n    }\n}\n\n\nexport function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n    nodes: [\n        { id: \"2\", label: \"2\" },\n        { id: \"3\", label: \"3\" },\n        { id: \"1\", label: \"1\" },\n        { id: \"4\", label: \"4\" },\n        { id: \"5\", label: \"5\" },\n    ],\n    edges: [\n        { from: \"1\", to: \"2\", label: \"6\" },\n        { from: \"1\", to: \"4\", label: \"1\" },\n        { from: \"2\", to: \"4\", label: \"2\" },\n        { from: \"2\", to: \"5\", label: \"1\" },\n        { from: \"4\", to: \"5\", label: \"1\" },\n        { from: \"5\", to: \"2\", label: \"2\" },\n        { from: \"3\", to: \"2\", label: \"5\" },\n        { from: \"5\", to: \"3\", label: \"5\" },\n    ]\n};\n\nconst Toggle = (props) => {\n    return (\n        <div>\n            <Radio\n                onChange={(e, s) => {\n                    props.onChange(s.checked);\n                }}\n                toggle\n                label=\"bidirectional\"\n            />\n        </div>\n    )\n};\n\n\nfunction Dfs() {\n    const ref = useRef();\n    const [bi, setbi] = useState(false);\n    const [sol, setsol] = useState(\"\");\n    const [solving, setsolving] = useState(false);\n    let ColorArray = [];\n    let path = \"\";\n    const [Path, setpath] = useState(\"\");\n    for (let i = 0; i < 8; i++) ColorArray.push('white');\n    ColorArray[7] = 'pink';\n    const [V, setV] = useState(\"\");\n    const options = {\n        interaction: { hover: true },\n        manipulation: {\n            enabled: true,\n            addNode: false,\n            addEdge: false,\n            editEdge: true,\n            deleteNode: true,\n            deleteEdge: true,\n        },\n        layout: {\n            hierarchical: false,\n        },\n        edges: {\n            color: \"#000000\",\n            smooth: true,\n        },\n    };\n\n    return (\n        <Container fluid >\n            <Navbar text=\"Depth First Search\" />\n            <Grid padded celled container doubling width='100hw'>\n                <Grid.Row stackable columns={3} divided >\n                    <Grid.Column mobile={16} computer={4}>\n                        <Toggle label=\"bidirectional\" onChange={(val) => {\n                            setbi(val);\n                            if (val) {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: false } },\n                                    },\n                                });\n                            } else {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: true } },\n                                    },\n                                });\n                            }\n                        }} />\n                        <Divider />\n                        <Addnode onAddnode={(node) => ref.current.nodes.add(node)} />\n                        <Divider />\n                        <Deletenode onDeletenode={(id) => { deletenode(id, ref.current); }} />\n\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={6} >\n                        <Addedge onAddedge={(edge) => { addedge(edge, ref.current, false); }} />\n                        <Divider />\n                        <Deleteedge onDeleteedge={(edge) => {\n                            deleteedge(edge, ref.current, bi);\n                        }} />\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={16}>\n                        <Solve\n                            solving={solving}\n                            time={true}\n                            solve=\n                            {async (start, t) => {\n                                setV(1);\n                                console.log(\"TIME\", t);\n                                setsolving(true);\n                                resetNetwork(ref.current);\n                                let Arr = [];\n                                let state = ref.current.nodes.map((node) => {\n                                    return {\n                                        id: node.id,\n                                        isvisited: node.id === start ? true : false,\n                                    };\n                                });\n                                Arr.push(start);\n                                path = \"Order of visited nodes : \" + start.toString() + \" \";\n                                setpath(path);\n                                setsol(\n                                    \" Stack : \" + Arr.map((n) => n.toString()).join(\" <- \")\n                                );\n                                await sleep(t * 1000);\n                                while (Arr.length >= 1) {\n                                    setV(2);\n                                    await sleep(t * 1000);\n                                    const nextnode = Arr.pop();\n                                    ref.current.nodes.update({\n                                        id: nextnode,\n                                        color: \"orange\",\n                                    });\n                                    setV(3);\n                                    setsol(\n                                        \" Stack : \" + Arr.reverse().slice().map((n) => n.toString()).join(\" <- \")\n                                    );\n                                    await sleep(t * 1000);\n                                    let connectededges = getconnectededges(nextnode, ref.current.edges.get(), bi);\n                                    for (const ed of connectededges) {\n                                        setV(4);\n                                        await sleep(t * 1000);\n                                        let ind = -1;\n                                        if (ed.from === nextnode) {\n                                            ind = findIndex(ed.to, state);\n                                        }\n                                        else if (bi & ed.to === nextnode) {\n                                            ind = findIndex(ed.from, state)\n                                        }\n                                        ref.current.nodes.update({\n                                            id: state[ind].id,\n                                            color: \"red\",\n                                        });\n                                        ref.current.edges.update({\n                                            ...ed,\n                                            color: \"red\",\n                                        });\n                                        setV(5);\n                                        await sleep(t * 1000);\n                                        if (state[ind].isvisited === false) {\n                                            state[ind].isvisited = true;\n                                            ref.current.nodes.update({\n                                                id: state[ind].id,\n                                                color: \"yellow\",\n                                            });\n                                            Arr.push(state[ind].id);\n                                            path = path + state[ind].id + \" \";\n                                            setpath(path);\n                                            setV(6);\n                                            setsol(\n                                                \" Stack : \" + Arr.reverse().slice().map((n) => n.toString()).join(\" <- \")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        else {\n                                            ref.current.nodes.update({\n                                                id: state[ind].id,\n                                                color: \"green\",\n                                            });\n                                        }\n                                        ref.current.edges.update({\n                                            ...ed,\n                                            color: null,\n                                        });\n                                    }\n                                    ref.current.nodes.update({\n                                        id: nextnode,\n                                        color: \"green\",\n                                    });\n                                }\n\n                                setV(2);\n                                await sleep(t * 1000);\n                                setV(7);\n                                setsolving(false);\n                            }\n                            }\n                        > dfs steps\n                    </Solve>\n                        <Segment style={{ height: \"15vh\" }} >\n                            {sol}\n                            <pre>{'\\n'}{Path}</pre>\n                        </Segment>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2} >\n                    <Grid.Column computer={8} mobile={16}>\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\"></link>\n                        <Graph\n                            style={{ height: \"80vh\" }}\n                            graph={graph}\n                            options={options}\n                            ref={ref}\n                        />\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={8}>\n                        <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n                        <Table size='small' >\n                            <Table.Body >\n                                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 7) % 8]} >\n                                    <pre>{\"BEGIN\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 6) % 8]} >\n                                    <pre>{\"Stack S:{}\"}</pre>\n                                    <pre>{\"for each vertex V ∈ vertices\"}</pre>\n                                    <pre>{\"\\tvisited[V] = false\"}</pre>\n                                    <pre>{\"visited[A] = true, (A : start node)\"}</pre>\n                                    <pre>{\"push A into S\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 5) % 8]} >\n                                    <pre>{\"While Stack S ≠ ∅ (empty)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 8]} >\n                                    <pre>{\"\\tU = pop node from S\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 8]} >\n                                    <pre>{\"\\tfor each neighbour V of U\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 8]} >\n                                    <pre>{\"\\t\\tif(visited[V]==false)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 8]} >\n                                    <pre>{\"\\t\\t\\tvisited[V] = true\"}</pre>\n                                    <pre>{\"\\t\\t\\tpush V into S\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 8]} >\n                                    <pre>{\"End\"}</pre>\n                                </Table.Cell></Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container >\n    );\n}\n\nexport default Dfs;\n","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n\n                    props.onAddedge(edge);\n                }}\n            >\n                Add Edge\n        </Button>\n        </Container >\n    );\n};\nexport default Addedge;\n","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" ></Input>\n            <Button disabled={!node} onClick={() => {\n                const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Deleteedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w | w < 0}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n                    props.onDeleteedge(edge);\n                }}\n            >\n                Delete Edge\n        </Button>\n        </Container>\n    );\n};\nexport default Deleteedge;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}></Input>\n            <Button color='red' disabled={!id} onClick={() => {\n                try {\n                    props.onDeletenode(id);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    const [start, setstart] = useState(\"1\");\n    // const [end, setend] = useState(\"5\");\n    const [time, settime] = useState(0.5);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n                            value={time}\n                            min={0.5} max={5} step={0.5}\n                            placeholder=\"s\" type=\"range\"\n                            onChange={(e) => settime(e.target.value)}></input>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Input value={start} placeholder=\"Start\" onChange={(e) => setstart(e.target.value)}></Input>\n            {/* <Input value={end} placeholder=\"End\" onChange={(e) => setend(e.target.value)}></Input> */}\n            <Button\n                disabled={!start || !time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(start, time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Segment, Radio, Table, Label } from \"semantic-ui-react\";\nimport Addedge from \"./addedge\";\nimport Addnode from \"./node\";\nimport Deleteedge from \"./deleteedge\";\nimport Deletenode from \"./delete\"\nimport Solve from \"./solve\";\nimport { addedge, deleteedge, deletenode, resetNetwork } from \"./network\";\nimport \"./bfs.css\";\nimport Navbar from '../../utils/Navbar';\n\nexport function getconnectededges(id, edges, bi) {\n    let connectededges = [];\n    for (let j = 0; j < edges.length; j++) {\n        let edge = edges[j];\n        if (edge.from === id) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n        else if (edge.to === id && bi) {\n            // if (connectededges.includes(edge)) continue;\n            connectededges.push(edge);\n        }\n    }\n    return connectededges;\n}\n\n\nexport function findIndex(id, table) {\n    console.log(\"id t\", id, table);\n    for (let i = 0; i < table.length; i++) {\n        if (table[i].id === id) {\n            return i;\n        }\n    }\n}\n\n\nexport function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n    nodes: [\n        { id: \"2\", label: \"2\" },\n        { id: \"3\", label: \"3\" },\n        { id: \"1\", label: \"1\" },\n        { id: \"4\", label: \"4\" },\n        { id: \"5\", label: \"5\" },\n    ],\n    edges: [\n        // { from: \"1\", to: \"2\", label: \"-10\" },\n        // { from: \"2\", to: \"3\", label: \"-10\" },\n        // { from: \"3\", to: \"4\", label: \"-10\" },\n        // { from: \"4\", to: \"5\", label: \"-10\" },\n        // { from: \"5\", to: \"1\", label: \"-10\" },\n        { from: \"1\", to: \"2\", },\n        { from: \"1\", to: \"4\", },\n        { from: \"2\", to: \"4\", },\n        { from: \"2\", to: \"5\", },\n        { from: \"4\", to: \"5\", },\n        { from: \"5\", to: \"2\", },\n        { from: \"3\", to: \"2\", },\n        { from: \"5\", to: \"3\", },\n    ]\n};\n\nconst Toggle = (props) => {\n    return (\n        <div>\n            <Radio\n                onChange={(e, s) => {\n                    props.onChange(s.checked);\n                }}\n                toggle\n                label=\"bidirectional\"\n            ></Radio>\n        </div>\n    )\n};\n\n\nfunction Bfs() {\n    // console.log(\"in dijstra\");\n    const ref = useRef();\n    let Valarray = [];\n    const [sol, setsol] = useState(\"\");\n    const [bi, setbi] = useState(false);\n    const [solving, setsolving] = useState(false);\n    let ColorArray = [];\n    for (let i = 0; i < 8; i++) ColorArray.push('white');\n    ColorArray[7] = 'pink';\n    const [V, setV] = useState(\"\");\n    const options = {\n        autoResize: true,\n        interaction: { hover: true },\n        manipulation: {\n            enabled: true,\n            // initiallyActive: true,\n            addNode: false,\n            addEdge: false,\n            // editNode: true,\n            editEdge: true,\n            deleteNode: true,\n            deleteEdge: true,\n        },\n        layout: {\n            randomSeed: undefined,\n            improvedLayout: true,\n            hierarchical: {\n                enabled: false,\n                // enabled: true,\n                levelSeparation: 150,\n                nodeSpacing: 150,\n                treeSpacing: 200,\n                // blockShifting: true,\n                edgeMinimization: true,\n                parentCentralization: false,\n                direction: 'UD',        // UD, DU, LR, RL\n                sortMethod: \"directed\",   // hubsize, directed\n                shakeTowards: \"roots\",\n            }\n\n        },\n        edges: {\n            color: \"#000000\",\n            smooth: {\n                // type: \"cubicBezier\",\n                // forceDirection: 'vertical',\n                // roundness: 0.25\n            },\n        },\n        // height: \"100%\",\n    };\n\n    return (\n        <Container fluid>\n            <Navbar text=\"Breadth First Search\" />\n            <Grid padded celled container doubling width='100hw'>\n                <Grid.Row stackable columns={3} divided >\n                    <Grid.Column mobile={16} computer={4}>\n                        <Toggle label=\"bidirectional\" onChange={(val) => {\n                            setbi(val);\n                            if (val) {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: false } },\n                                    },\n                                });\n                            } else {\n                                ref.current.Network.setOptions({\n                                    edges: {\n                                        smooth: true,\n                                        arrows: { to: { enabled: true } },\n                                    },\n                                });\n                            }\n                        }} />\n                        <Divider />\n                        <Addnode onAddnode={(node) => ref.current.nodes.add(node)} />\n                        <Divider />\n                        <Deletenode onDeletenode={(id) => { deletenode(id, ref.current); }} />\n\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={6} >\n                        <Addedge onAddedge={(edge) => { addedge(edge, ref.current, false); }} />\n                        <Divider />\n                        <Deleteedge onDeleteedge={(edge) => {\n                            deleteedge(edge, ref.current, bi);\n                        }} />\n                        <Divider />\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={16}>\n                        <Solve\n                            solving={solving}\n                            time={true}\n                            solve=\n                            {async (start, t) => {\n                                console.log(\"TIME\", t);\n                                setsolving(true);\n                                setV(1);\n                                resetNetwork(ref.current);\n                                let Arr = [];\n                                let state = ref.current.nodes.map((node) => {\n                                    return {\n                                        id: node.id,\n                                        isvisited: node.id === start ? true : false,\n                                        distance: node.id === start ? 0 : \"-\",\n                                    };\n                                });\n                                for (let i = 0; i < state.length; i++) {\n                                    ref.current.nodes.update({\n                                        id: state[i].id,\n                                        label: state[i].id + \":\" + state[i].distance,\n                                    });\n                                }\n                                Arr.push(start);\n                                Valarray = Arr;\n                                setsol(\n                                    \"QUEUE : \" + Valarray.map((n) => n.toString() + \" \").join(\"<-\")\n                                );\n                                await sleep(t * 1000);\n                                setV(2);\n                                await sleep(t * 1000);\n                                while (Arr.length >= 1) {\n                                    console.log(\"while\");\n                                    const nextnode = Arr[0];\n                                    ref.current.nodes.update({\n                                        id: nextnode,\n                                        color: \"orange\",\n                                    });\n                                    Arr.shift();\n                                    Valarray = Arr;\n                                    setsol(\n                                        \"QUEUE : \" + Valarray.map((n) => n.toString() + \" \").join(\"<-\")\n                                    );\n                                    setV(3);\n                                    await sleep(t * 1000);\n                                    // for (let i = 0; i < state.length; i++) {\n                                    //     if (state[i].id === nextnode) {\n                                    //         state[i].visited = 1;\n                                    //     }\n                                    // }\n                                    let connectededges = getconnectededges(nextnode, ref.current.edges.get(), bi);\n\n                                    for (const ed of connectededges) {\n                                        ref.current.edges.update(\n                                            {\n                                                ...ed,\n                                                color: \"orange\",\n                                                width: 2,\n                                            }\n                                        )\n                                        let ind = -1;\n                                        if (ed.from === nextnode) {\n                                            ind = findIndex(ed.to, state);\n                                        }\n                                        else if (bi & ed.to === nextnode) {\n                                            ind = findIndex(ed.from, state)\n                                        }\n                                        setV(4);\n                                        Valarray = Arr;\n                                        setsol(\n                                            \"QUEUE : \" + Valarray.map((n) => n.toString() + \" \").join(\"<-\")\n                                        );\n                                        await sleep(t * 1000);\n                                        setV(5);\n                                        await sleep(t * 1000);\n                                        if (state[ind].isvisited === false) {\n                                            state[ind].isvisited = true;\n                                            state[ind].distance = state[findIndex(nextnode, state)].distance + 1;\n                                            Arr.push(state[ind].id);\n                                            // ref.current.edges.update(\n                                            //     {\n                                            //         ...ed,\n                                            //         color: \"green\",\n                                            //         width: 2,\n                                            //     }\n                                            // )\n                                            ref.current.nodes.update({\n                                                id: state[ind].id,\n                                                label: state[ind].id + \":\" + state[ind].distance,\n                                                color: \"yellow\",\n                                            })\n                                            setV(6);\n                                            Valarray = Arr;\n                                            setsol(\n                                                \"QUEUE : \" + Valarray.map((n) => n.toString() + \" \").join(\"<-\")\n                                            );\n                                            await sleep(t * 1000);\n                                        }\n                                        // else {\n                                        ref.current.edges.update(\n                                            {\n                                                ...ed,\n                                                color: null,\n                                                width: 1,\n                                            }\n                                        )\n                                        // }\n                                    }\n                                    ref.current.nodes.update({\n                                        id: nextnode,\n                                        color: null,\n                                    });\n                                    setV(2);\n                                    await sleep(t * 1000);\n                                }\n                                setV(7);\n                                setsolving(false);\n                            }\n                            }\n                        > bfs steps\n                    </Solve>\n                        <Segment style={{ height: \"10vh\" }} >\n                            {sol}\n                        </Segment>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2} >\n                    <Grid.Column computer={8} mobile={16}>\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\"></link>\n                        <Graph\n                            style={{ height: \"80vh\" }}\n                            graph={graph}\n                            options={options}\n                            ref={ref}\n                        />\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={8}>\n                        <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n                        <Table size='small' >\n                            <Table.Body >\n                                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 7) % 8]} >\n                                    <pre>{\"BEGIN\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 6) % 8]} >\n                                    <pre>{\"for each vertex V ∈ vertices\"}</pre>\n                                    <pre>{\"\\texplored[V] = false,d[V] = ∞\"}</pre>\n                                    <pre>{\"explored[S] = true,d[S] = 0 [S : start node]\"}</pre>\n                                    <pre>{\"Insert Start to Q\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 5) % 8]} >\n                                    <pre>{\"While queue Q ≠ ∅ (empty)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 8]} >\n                                    <pre>{\"\\tU = remove node from the front of Q\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 8]} >\n                                    <pre>{\"\\tfor each V adjacent to U\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 8]} >\n                                    <pre>{\"\\t\\tif explored[V] ≠ true\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 8]} >\n                                    <pre>{\"\\t\\t\\texplored[v] = true\"}</pre>\n                                    <pre>{\"\\t\\t\\td[V] = d[U] + 1\"}</pre>\n                                    <pre>{\"\\t\\t\\tInsert V to the end of Q\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 8]} >\n                                    <pre>{\"END\"}</pre>\n                                </Table.Cell></Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container >\n    );\n}\n\nexport default Bfs;\n","export const newTrace = (array) => {\n  return [\n    {\n      array: [...array],\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: []\n    }\n  ];\n};\n\nexport const addToTrace = (\n  trace,\n  array,\n  value,\n  sortedIndices = [],\n  groupA = [],\n  groupB = [],\n  groupC = [],\n  groupD = []\n) => {\n  trace.push({\n    array: [...array],\n    groupA: [...groupA],\n    groupB: [...groupB],\n    groupC: [...groupC],\n    groupD: [...groupD],\n    value: value,\n    sortedIndices: [...sortedIndices]\n  });\n};\n\nexport const lastSorted = (trace) => {\n  return trace[trace.length - 1].sortedIndices;\n};\n\nexport const swap = (array, i, j) => {\n  const tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n};\n\nexport const createRange = (start, end) => {\n  return [...Array(end - start).keys()].map((elem) => elem + start);\n};\n","import { swap, newTrace, addToTrace, lastSorted, } from './../helpers';\n\nconst BubbleSort = (nums) => {\n  const trace = newTrace(nums);\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length - i - 1; j++) {\n      addToTrace(trace, nums, 0, lastSorted(trace), [j, j + 1]);\n      if (nums[j] > nums[j + 1]) {\n        swap(nums, j, j + 1);\n        addToTrace(trace, nums, 1, lastSorted(trace), [], [j, j + 1]);\n      }\n    }\n    addToTrace(trace, nums, -1, [\n      ...lastSorted(trace),\n      nums.length - 1 - i\n    ]);\n  }\n\n  return trace;\n};\n\nexport default BubbleSort;\n","import React from 'react';\nimport './style.css';\n\nconst Bar = ({\n  width,\n  height,\n  val,\n  stateA,\n  stateB,\n  stateC,\n  stateD,\n  sorted,\n  style\n}) => {\n  let classNames = 'Bar';\n  if (sorted) classNames += ' Bar_sorted';\n  if (stateD) classNames += ' Bar_stateD';\n  else if (stateC) classNames += ' Bar_stateC';\n  else if (stateB) classNames += ' Bar_stateB';\n  else if (stateA) classNames += ' Bar_stateA';\n\n  let BarStyle = { ...style, width: `${width}%`, height: `${height}%` };\n  if (stateA || stateB || stateC || stateD) {\n    BarStyle['marginRight'] = `${0.3 * width}%`;\n    BarStyle['marginLeft'] = `${0.3 * width}% `;\n  }\n\n  return (\n    <div style={BarStyle} className={classNames}>\n      <span className=\"Bar__Text\">{val}</span>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport './style.css';\n\nimport Bar from '../Bar/index';\n\nconst getListOfBars = (\n  numbers,\n  maxNum,\n  groupA,\n  groupB,\n  groupC,\n  groupD,\n  sortedIndices\n) => {\n  return numbers.map((num, i) => {\n    let width = 100 / numbers.length;\n    let height = (num / maxNum) * 100;\n    let stateA = groupA.includes(i);\n    let stateB = groupB.includes(i);\n    let stateC = groupC.includes(i);\n    let stateD = groupD.includes(i);\n    let sorted = sortedIndices.includes(i);\n\n    let margin =\n      i === numbers.length ? '0' : width > 3 ? '0.50rem' : '0.125rem';\n    return (\n      <Bar\n        key={`${i}_${num}`}\n        width={width}\n        height={height}\n        val={width > 2 ? num : null}\n        stateA={stateA}\n        stateB={stateB}\n        stateC={stateC}\n        stateD={stateD}\n        sorted={sorted}\n        style={{ marginRight: `${margin}` }}\n      />\n    );\n  });\n};\n\nconst SortChart = ({\n  numbers,\n  maxNum,\n  groupA,\n  groupB,\n  groupC,\n  groupD,\n  sortedIndices\n}) => {\n  return (\n    <div className=\"SortChart\">\n      {getListOfBars(\n        numbers,\n        maxNum,\n        groupA,\n        groupB,\n        groupC,\n        groupD,\n        sortedIndices\n      )}\n    </div>\n  );\n};\n\nexport default SortChart;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { Icon } from 'semantic-ui-react';\n\nconst VisualizerControls = ({\n    onPlay,\n    onPause,\n    onBackward,\n    onForward,\n    playing,\n}) => {\n    return (\n        <div className=\"VisualizerControls\">\n            <Icon\n                name='step backward'\n                size='large'\n                onClick={onBackward}\n            />\n            <Icon\n                name={playing ? 'stop' : 'play'}\n                size='large'\n                onClick={playing ? onPause : onPlay}\n            />\n            <Icon\n                name='step forward'\n                size='large'\n                onClick={onForward}\n            />\n        </div>\n    );\n};\n\n// VisualizerControls.propTypes = {\n//     onPlay: PropTypes.func,\n//     onPause: PropTypes.func,\n//     onBackward: PropTypes.func,\n//     onForward: PropTypes.func,\n//     onRepeat: PropTypes.func,\n//     // onAdjustSpeed: PropTypes.func,\n\n//     playing: PropTypes.bool,\n//     playDisabled: PropTypes.bool,\n//     pauseDisabled: PropTypes.bool,\n//     backwardDisabled: PropTypes.bool,\n//     forwardDisabled: PropTypes.bool,\n//     repeatDisabled: PropTypes.bool,\n//     playbackSpeed: PropTypes.number\n// };\n\nexport default VisualizerControls;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    value: -1,\n    sortedIndices: [],\n    timeoutIds: [],\n    colour1: \"null\",\n    colour2: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (visualState.value !== -1) {\n      console.log(\"iam here\")\n      if (Number(visualState.value) === 0) {\n        this.setState({ colour1: \"pink\", colour2: \"\" });\n      }\n      else {\n        this.setState({ colour1: \"\", colour2: \"grey\" });\n      }\n    }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\"iterate left_index = 0 to N-2 by incrementing 1 at a time\"}</pre>\n          <pre>{\"\\titerate right_index = 0 to N-2-left_index 1 at a time\"}</pre>\n          <pre className={this.state.colour1}> {\"\\t\\tif(arr[right_index] > arr[right_index+1])\"}</pre>\n          <pre className={this.state.colour2}>{\"\\t\\t\\tswap(&arr[right_index],&arr[right_index+1]);\"}</pre>\n          {/* <pre>{this.state.speed}</pre> */}\n        </Segment>\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;\n","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport BubbleSort from './BubbleSort';\nimport Visualizer from \"./visualizer\";\nimport './../style.css';\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = BubbleSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container className=\"Container\" fluid>\n            <Navbar text=\"Bubble Sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import { swap, newTrace, addToTrace, lastSorted } from './../helpers';\n\nconst SelectionSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  // Core Algorithm\n  for (let i = 0; i < nums.length - 1; i++) {\n    // Internal Loop: Find index of min value\n    let minIndex = i;\n    for (let j = i + 1; j < nums.length; j++) {\n      // Visualize: comparing A[j] to A[minIndex]\n      addToTrace(trace, nums, 0, lastSorted(trace), [minIndex, j]);\n      if (nums[j] < nums[minIndex]) {\n        // Visualize: discovered new minIndex\n        addToTrace(trace, nums, -1, lastSorted(trace), [minIndex], [j]);\n        minIndex = j;\n        // Visualize: reassign new minIndex;\n        addToTrace(trace, nums, -1, lastSorted(trace), [minIndex], [j]);\n      }\n    }\n\n    // Visualize: i'th value to be swapped with min value\n    addToTrace(trace, nums, -1, lastSorted(trace), [], [i, minIndex]);\n\n    swap(nums, i, minIndex);\n\n    // Visualize: i'th value has been swapped with min value\n    addToTrace(trace, nums, 1, [...lastSorted(trace), i], [], []);\n  }\n\n  // Visualize: Final item in the array is sorted\n  addToTrace(trace, nums, -1, [...lastSorted(trace), nums.length - 1]);\n\n  return trace;\n};\nexport default SelectionSort;","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    value: -1,\n    sortedIndices: [],\n    timeoutIds: [],\n    colour1: \"null\",\n    colour2: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (visualState.value !== -1) {\n      console.log(\"iam here\")\n      if (Number(visualState.value) === 0) {\n        this.setState({ colour1: \"pink\", colour2: \"\" });\n      }\n      else {\n        this.setState({ colour1: \"\", colour2: \"grey\" });\n      }\n    }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\"iterate left_index = 0 to N-1 by incrementing 1 at a time\"}</pre>\n          <pre>{\"\\titerate right_index = i+1 to N-1-left_index 1 at a time\"}</pre>\n          <pre className={this.state.colour1}> {\"\\t\\tif(nums[j] < nums[minIndex])\"}</pre>\n          <pre className={this.state.colour2}>{\"\\t\\t\\tswap(nums, i, minIndex);\"}</pre>\n        </Segment>\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;\n","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport SelectionSort from './SelectionSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = SelectionSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Selection Sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import { newTrace, addToTrace } from './../helpers';\n\nconst InsertionSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  // Core Algorithm\n  for (let i = 1; i < nums.length; i++) {\n    let value = nums[i];\n    let hole = i;\n    // Visualize: Hole has been selected for comparison\n    addToTrace(trace, nums, 0, [], [i]);\n    while (hole > 0 && nums[hole - 1] > value) {\n      // Visualize: Compare hole to value\n      addToTrace(trace, nums, 1, [], [hole], [hole - 1]);\n      nums[hole] = nums[hole - 1];\n      hole -= 1;\n      // Visualize: Overwrite hole with hole - 1\n      addToTrace(trace, nums, 2, [], [], [hole, hole + 1]);\n    }\n    // Visualize: Overwrite hole with value\n    addToTrace(trace, nums, 2, [], [], [], [hole]);\n    nums[hole] = value;\n    // Visualize: value is in sorted position\n    addToTrace(trace, nums, -1, [], [], [], [hole]);\n  }\n\n  // Visualize: Mark all elements as sorted\n  addToTrace(trace, nums, [...Array(nums.length).keys()]);\n  return trace;\n};\nexport default InsertionSort;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    value: -1,\n    sortedIndices: [],\n    timeoutIds: [],\n    colour1: \"null\",\n    colour2: \"null\",\n    colour3: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (visualState.value !== -1) {\n      console.log(\"iam here\")\n      if (Number(visualState.value) === 0) {\n        this.setState({ colour1: \"green\", colour2: \"\", colour3: \"\" });\n      }\n      else if (Number(visualState) === 1) {\n        this.setState({ colour1: \"\", colour2: \"green\", colour3: \"\" });\n      }\n      else {\n        this.setState({ colour1: \"\", colour2: \"\", colour3: \"green\" });\n      }\n    }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\" Iterate left_index = 0 to N by incrementing 1 at a time\"}</pre>\n          <pre className={this.state.colour1}> {\"\\ttemp = array[presentindex]\"}</pre>\n          <pre className={this.state.colour2}> {\"\\t\\twhile((j = last_sorted_Index to 0)&&(if(temp < array[j]))\"}</pre>\n          <pre className={this.state.colour3}> {\"\\t\\t\\tmove element to the right by 1\"}</pre>\n        </Segment>\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;\n","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport InsertionSort from './InsertionSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\n\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = InsertionSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Insertion Sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import { newTrace, addToTrace } from './../helpers';\n\nconst MergeSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  function merge(original, start, mid, end) {\n    const left = original.slice(start, mid);\n    const right = original.slice(mid, end);\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < left.length && j < right.length) {\n      if (left[i] <= right[j]) {\n        addToTrace(trace, original, 1, [], [], [], [k + start]);\n        original[k + start] = left[i];\n        i++;\n        addToTrace(trace, original, 1, [], [], [], [k + start]);\n      } else {\n        addToTrace(trace, original, 2, [], [], [], [k + start]);\n        original[k + start] = right[j];\n        j++;\n        addToTrace(trace, original, 2, [], [], [], [k + start]);\n      }\n      k++;\n    }\n    while (i < left.length) {\n      addToTrace(trace, original, 3, [], [], [], [k + start]);\n      original[k + start] = left[i];\n      i++;\n      k++;\n      addToTrace(trace, original, 3, [], [], [], [k + start]);\n    }\n    while (j < right.length) {\n      addToTrace(trace, original, 4, [], [], [], [k + start]);\n      original[k + start] = right[j];\n      j++;\n      k++;\n      addToTrace(trace, original, 4, [], [], [], [k + start]);\n    }\n\n    left.length = 0;\n    right.length = 0;\n  }\n\n  function recursiveMergeSort(original, start, end) {\n    const length = end - start;\n    if (length < 2) {\n      // original = []\n      if (length < 1) return original;\n      // original = [x]\n      else return [original[start]];\n    }\n\n    const midPoint = Math.floor((start + end) / 2);\n\n    // Visualize: First Half\n    addToTrace(\n      trace,\n      original, 0,\n      [],\n      [...Array(midPoint - start).keys()].map((i) => i + start)\n    );\n    recursiveMergeSort(original, start, midPoint);\n\n    // Visualize: Second Half\n    addToTrace(\n      trace,\n      original, 5,\n      [],\n      [...Array(end - midPoint).keys()].map((i) => i + midPoint)\n    );\n    recursiveMergeSort(original, midPoint, end);\n\n    merge(original, start, midPoint, end);\n  }\n\n  recursiveMergeSort(nums, 0, nums.length);\n\n  // Visualize: Mark all elements as sorted\n  addToTrace(trace, nums, -1, [...Array(nums.length).keys()]);\n  return trace;\n};\n\n\nexport default MergeSort;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    sortedIndices: [],\n    timeoutIds: [],\n    value: -1,\n    color1: \"null\",\n    color2: \"null\",\n    color3: \"null\",\n    color4: \"null\",\n    color5: \"null\",\n    color6: \"null\",\n    color7: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      color1: \"null\",\n      color2: \"null\",\n      color3: \"null\",\n      color4: \"null\",\n      color5: \"null\",\n      color6: \"null\",\n      color7: \"null\",\n      sortedIndices: visualState.sortedIndices\n    });\n    let comp = Number(visualState.value);\n    if (comp === 0) { this.setState({ color5: \"ok\" }); }\n    if (comp === 1) { this.setState({ color1: \"ok\" }); this.setState({ color7: \"ok\" }); }\n    if (comp === 2) { this.setState({ color2: \"ok\" }); this.setState({ color7: \"ok\" }); }\n    if (comp === 3) { this.setState({ color3: \"ok\" }); this.setState({ color7: \"ok\" }); }\n    if (comp === 4) { this.setState({ color4: \"ok\" }); this.setState({ color7: \"ok\" }); }\n    if (comp === 5) { this.setState({ color6: \"ok\" }); }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>MERGE</pre>\n          <pre>while(leftpointer lessthan leftlength  and rightpointer lessthan rightlenth)</pre>\n          <pre className={this.state.color1}>if(left less or equal right) newarray.push(left)</pre>\n          <pre className={this.state.color2}>if(right less right) newarray.push(right)</pre>\n          <pre className={this.state.color3}>clone the left remaining array that is unused for comparision</pre>\n          <pre className={this.state.color4}>clone the right remaining array that is unused for comparision</pre>\n        </Segment>\n        <Segment>\n          <pre>MERGESORT</pre>\n          <pre>untill length is completed </pre>\n          <pre className={this.state.color5}>mergesort first half</pre>\n          <pre className={this.state.color6}>mergesort second half</pre>\n          <pre className={this.state.color7}>merge the two halves</pre>\n        </Segment>\n\n\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport MergeSort from './MergeSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = MergeSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Merge Sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createRange,\n} from './../helpers';\n\nconst QuickSort = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  function choosePivot(array, start, end) {\n    // randomly pick an element between start and end;\n    return Math.floor(Math.random() * (end - start)) + start;\n  }\n\n  function partition(array, start, end) {\n    let i = start + 1;\n    let j = start + 1;\n\n    // Visualize: Keep pivot marked\n    addToTrace(trace, array, 2, lastSorted(trace), [start]);\n\n    while (j <= end) {\n      if (array[j] < array[start]) {\n        // Visualize: Mark item that is less than pivot\n        addToTrace(\n          trace,\n          array, 3,\n          lastSorted(trace),\n          [start],\n          [j],\n          [],\n          createRange(start + 1, i)\n        );\n\n        swap(array, i, j);\n\n        // Visualize: Move item to lesser list\n        addToTrace(\n          trace,\n          array, 3,\n          lastSorted(trace),\n          [start],\n          [i],\n          [],\n          createRange(start + 1, i)\n        );\n        i += 1;\n      }\n      j += 1;\n    }\n\n    // Visualize: Mark center position\n    addToTrace(\n      trace,\n      array, 4,\n      lastSorted(trace),\n      [i - 1],\n      [],\n      [],\n      createRange(start, i - 1)\n    );\n    swap(array, start, i - 1);\n\n    // Visualize: Move pivot to center\n    addToTrace(\n      trace,\n      array, 4,\n      lastSorted(trace),\n      [i - 1],\n      [],\n      [],\n      createRange(start, i - 1)\n    );\n    return i - 1;\n  }\n\n  function recursiveQuickSort(array, start, end) {\n    if (start >= end) {\n      if (start === end) {\n        // Visualize: Mark only item as sorted\n        addToTrace(trace, array, [...lastSorted(trace), start]);\n      }\n      return null;\n    }\n\n    let pivot = choosePivot(array, start, end);\n\n    // Visualize: Mark chosen pivot\n    addToTrace(trace, array, 0, lastSorted(trace), [pivot]);\n\n    swap(array, start, pivot);\n\n    // Visualize: Move chosen pivot to start\n    addToTrace(trace, array, 1, lastSorted(trace), [pivot]);\n\n    pivot = partition(array, start, end);\n\n    // Visualize: Mark pivot after partition as sorted\n    addToTrace(trace, array, 5, [...lastSorted(trace), pivot]);\n\n    recursiveQuickSort(array, start, pivot - 1);\n    recursiveQuickSort(array, pivot + 1, end);\n  }\n\n  recursiveQuickSort(nums, 0, nums.length - 1);\n\n  return trace;\n};\n\n\n\nexport default QuickSort;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    sortedIndices: [],\n    timeoutIds: [],\n    value: -1,\n    speed: 1,\n    color0: \"null\",\n    color1: \"null\",\n    color5: \"null\",\n    color3: \"null\",\n    color4: \"null\",\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      color0: \"null\",\n      color1: \"null\",\n      color3: \"null\",\n      color4: \"null\",\n      color5: \"null\",\n      sortedIndices: visualState.sortedIndices\n    });\n    let comp = Number(visualState.value);\n    if (comp === 0) { this.setState({ color0: \"ok\" }); }\n    if (comp === 1) { this.setState({ color1: \"ok\" }); }\n    if (comp === 3) { this.setState({ color3: \"ok\" }); this.setState({ color5: \"ok\" }); }\n    if (comp === 4) { this.setState({ color4: \"ok\" }); this.setState({ color5: \"ok\" }); }\n    if (comp === 5) { this.setState({ color5: \"ok\" }); }\n  };\n\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\"PARTITION(array,start,end)\"}</pre>\n          <pre className={this.state.color3}>\n            {\"i= start+1;j=start+1;\\nwhile(j<=end){\\nif(array[j]<array[start]){\\nswap(array,i,j)\\ni+=1;}\"}</pre><pre>{\"\\nj+=1;\\n}\"}</pre><pre className={this.state.color4}>{\"\\nswap(array,start,i-1);\\nreturn i-1\\n}\"}\n          </pre>\n          <pre>{\"if(start>=end){\\n\\treturn null;\\n}\"}</pre>\n        </Segment>\n        <Segment>\n          <pre>{\"QUICK SORT\"}</pre>\n          <pre className={this.state.color0}>{\"choosepivot(array,start,end);\"}</pre>\n          <pre className={this.state.color1}>{\"swap(array,start,pivot);\"}</pre>\n          <pre className={this.state.color5}>{\"partition(array,start,end)\"}</pre>\n          <pre>{\"recursiveQuickSort(array, start, pivot - 1);\\nrecursiveQuickSort(array, pivot + 1, end);}\"}</pre>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport QuickSort from './QuickSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = QuickSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Quicksort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createRange,\n} from './../helpers';\n\nconst QuickSort3 = (nums) => {\n  // Initial State\n  const trace = newTrace(nums);\n\n  function choosePivot(array, start, end) {\n    // randomly pick an element between start and end;\n    return Math.floor(Math.random() * (end - start)) + start;\n  }\n\n  function partition(array, start, end) {\n    const pivot = array[start];\n    let i = start + 1;\n    let j = start + 1;\n    let k = start + 1;\n    // Between k and end : uncheked\n    // Between start and i : equal to pivot\n    // Between i and j : less than pivot\n    // Between j and k : greater than pivot\n\n    // Visualize: Keep pivot marked\n    addToTrace(trace, array,0, lastSorted(trace), [start]);\n\n    while (k < end) {\n      if (array[k] === pivot) {\n        // Visualize: Mark item that is equal to pivot\n        addToTrace(\n          trace,\n          array,\n          lastSorted(trace),\n          [start, ...createRange(start, i)],\n          [k],\n          [],\n          createRange(i, j)\n        );\n\n        swap(array, i, k);\n\n        // Visualize: Mark item that is equal to pivot\n        addToTrace(\n          trace,\n          array,\n          lastSorted(trace),\n          [start, ...createRange(start, i)],\n          [i],\n          [],\n          createRange(i, j)\n        );\n\n        if (j > i) swap(array, j, k);\n        i += 1;\n        j += 1;\n      } else if (array[k] < pivot) {\n        // Visualize: Mark item that is less than pivot\n        addToTrace(\n          trace,\n          array,\n          lastSorted(trace),\n          [start, ...createRange(start, i)],\n          [k],\n          [],\n          createRange(i, j)\n        );\n\n        swap(array, j, k);\n\n        // Visualize: Move item to lesser list\n        addToTrace(\n          trace,\n          array,\n          3,\n          lastSorted(trace),\n          [start, ...createRange(start, i)],\n          [j],\n          [],\n          createRange(i, j)\n        );\n\n        j += 1;\n      }\n      k += 1;\n    }\n\n    const pivot_elements = i - start;\n    i -= 1;\n    j -= 1;\n    while (i >= start) {\n      swap(array, i, j);\n      i -= 1;\n      j -= 1;\n    }\n\n    // Visualize: Move pivot_elements to center\n    addToTrace(\n      trace,\n      array,\n      4,\n      lastSorted(trace),\n      createRange(j + 1, j + 1 + pivot_elements),\n      [],\n      [],\n      createRange(start, j + 1)\n    );\n    return [j + 1, j + 1 + pivot_elements];\n  }\n\n  function recursiveQuickSort3(array, start, end) {\n    if (start >= end - 1) {\n      if (start === end - 1) {\n        // Visualize: Mark only item as sorted\n        addToTrace(trace, array,-1, [...lastSorted(trace), start]);\n      }\n      return null;\n    }\n\n    let pivot = choosePivot(array, start, end);\n\n    // Visualize: Mark chosen pivot\n    addToTrace(trace, array,0, lastSorted(trace), [pivot]);\n\n    swap(array, start, pivot);\n\n    // Visualize: Move chosen pivot to start\n    addToTrace(trace, array, 1, lastSorted(trace), [pivot]);\n\n    let [pivotStart, pivotEnd] = partition(array, start, end);\n\n    // Visualize: Mark pivot after partition as sorted\n    addToTrace(trace, array, 2,[\n      ...lastSorted(trace),\n      ...createRange(pivotStart, pivotEnd)\n    ]);\n\n    recursiveQuickSort3(array, start, pivotStart);\n    recursiveQuickSort3(array, pivotEnd, end);\n  }\n\n  recursiveQuickSort3(nums, 0, nums.length);\n\n  return trace;\n};\n\n\n\nexport default QuickSort3;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    value: -1,\n    sortedIndices: [],\n    timeoutIds: [],\n    colour1: \"null\",\n    colour2: \"null\",\n    colour3: \"null\",\n    colour4: \"null\",\n    colour5: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (visualState.value !== -1) {\n      console.log(\"iam here\")\n      if (Number(visualState.value) === 0) {\n        this.setState({ colour1: \"green\", colour2: \"\", colour3: \"\", colour4: \"\", colour5: \"\" });\n      }\n      else if (Number(visualState) === 1) {\n        this.setState({ colour1: \"\", colour2: \"green\", colour3: \"\", colour4: \"\", colour5: \"\" });\n      }\n      else if (Number(visualState) === 2) {\n        this.setState({ colour1: \"\", colour2: \"\", colour3: \"green\", colour4: \"\", colour5: \"\" });\n      }\n      else if (Number(visualState) === 3) {\n        this.setState({ colour1: \"\", colour2: \"\", colour3: \"\", colour4: \"green\", colour5: \"\" });\n      }\n      else {\n        this.setState({ colour1: \"\", colour2: \"\", colour3: \"\", colour4: \"\", colour5: \"green\" });\n      }\n    }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\"QUICK SORT USING 3- WAY PARTITION\\n\"}</pre>\n          <pre className={this.state.colour2}> {\" swap(array, start, end)\"}</pre>\n          <pre className={this.state.colour4}> {\" swap(array, j, k);\"}</pre>\n          <pre className={this.state.colour5}> {\"\\tpivot_elements = i - start;\\n \\ti = i- 1;\\n\\tj = j - 1;\\n\\n\\twhile (i >= start)\\n \\t{\\n\\t\\tswap(array, i, j);\\n\\t\\ti = i - 1;\\n\\t\\tj = j -  1;\\n\\t}\"}</pre>\n        </Segment>\n        <Segment>\n          <pre>{\" Iterate left_index = 0 to N by incrementing 1 at a time\"}</pre>\n          <pre className={this.state.colour1}> {\"\\tpiviot = rand(start,end)\"}</pre>\n          <pre className={this.state.colour2}> {\" \\tswapping\"}</pre>\n          <pre className={this.state.colour3}> {\"\\t\\t[pivotStart, pivotEnd] = partition(array, start, end\"}</pre>\n          <pre className={this.state.colour4}> {\"\\t\\tMove the elements less than piviot to to lesser list \"}</pre>\n          <pre className={this.state.colour5}> {\"\\t\\tMove pivot_elements to center\"}</pre>\n          <pre>{\" \\trecursiveQuickSort3(array, start, pivotStart) \\n\\trecursiveQuickSort3(array, pivotEnd, end)\\n\\trecursiveQuickSort3(nums, 0, nums.length)\"}</pre>\n        </Segment>\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;\n","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport QuickSort3 from './QuickSort3';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = QuickSort3(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Quicksort3\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import {\n  swap,\n  newTrace,\n  addToTrace,\n  lastSorted,\n  createRange,\n} from './../helpers';\n\nconst HeapSort = (nums) => {\n  const trace = newTrace(nums);\n\n  // Helper functions to quickly access nodes\n  const left = (i) => 2 * i + 1;\n  const right = (i) => 2 * i + 2;\n  const parent = (i) => Math.floor((i - 1) / 2);\n\n  const maxHeapify = (array, i, heapsize) => \n  {\n    const leftChild = left(i);\n    const rightChild = right(i);\n\n\n    // Visualize: Compare parent and leftChild\n    addToTrace(trace, array,2, lastSorted(trace), [i, leftChild]);\n\n    let largest =\n      leftChild < heapsize && array[leftChild] > array[i]\n        ? leftChild\n        : i;\n\n    // Visualize: Compare largest and rightChild\n    addToTrace(trace, array,3, lastSorted(trace), [largest, rightChild]);\n\n    if (rightChild < heapsize && array[rightChild] > array[largest])\n      largest = rightChild;\n\n    if (largest !== i) {\n      // Visualize: Select largest child and parent\n      addToTrace(trace, array, lastSorted(trace), [], [i, largest]);\n\n      swap(array, i, largest);\n\n      // Visualize: Swap largest child and parent\n      addToTrace(trace, array,4, lastSorted(trace), [], [i, largest]);\n\n      maxHeapify(array, largest, heapsize);\n    }\n  };\n\n  const BuildMaxHeap = (array) => {\n    const start = Math.floor(array.length / 2);\n    const heapsize = array.length;\n    for (let i = start; i >= 0; i--)\n    {\n      maxHeapify(array, i, heapsize);\n    }\n\n    // Visualize: Mark heap as built\n    addToTrace(\n      trace,\n      array,\n      -1,\n      lastSorted(trace),\n      [],\n      [],\n      [],\n      createRange(0, array.length)\n    );\n  };\n\n  const heapSort = (array) => {\n    BuildMaxHeap(array);\n    let heapsize = array.length;\n    for (let i = array.length - 1; i > 0; i--) {\n      // Visualize: Select Maximum\n      addToTrace(trace, array,0, lastSorted(trace), [], [0, i]);\n\n      swap(array, 0, i);\n      heapsize -= 1;\n\n      // Visualize: Swap with last element in heap\n      addToTrace(trace, array, 1,[...lastSorted(trace), i], [], [0, i]);\n\n      maxHeapify(array, 0, heapsize);\n\n      // Visualize: Heap created\n      addToTrace(\n        trace,\n        array,\n        2,\n        lastSorted(trace),\n        [],\n        [],\n        [],\n        createRange(0, heapsize)\n      );\n    }\n    addToTrace(trace, array, [...lastSorted(trace), 0]);\n  };\n\n  // Execute Heapsort\n  heapSort(nums);\n  return trace;\n};\n\n\n\nexport default HeapSort;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    value: -1,\n    sortedIndices: [],\n    timeoutIds: [],\n    colour1: \"null\",\n    colour2: \"null\",\n    colour3: \"null\",\n    colour4: \"null\",\n    colour5: \"null\",\n    speed: 1\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      value: -1,\n      sortedIndices: [],\n      originalArray: [...array]\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (visualState.value !== -1) {\n      console.log(\"iam here\")\n      if (Number(visualState.value) === 0) {\n        this.setState({ colour1: \"green\", colour2: \"\",colour3: \"\",colour4:\"\",colour5:\"\"});\n      }\n      else if(Number(visualState) === 1) {\n        this.setState({ colour1: \"\", colour2: \"green\",colour3: \"\",colour4:\"\",colour5:\"\"});\n      }\n      else if(Number(visualState) === 2) {\n        this.setState({ colour1: \"\", colour2: \"\",colour3: \"green\",colour4:\"\",colour5:\"\"});\n      }\n      else if(Number(visualState) === 3) {\n        this.setState({ colour1: \"\", colour2: \"\",colour3: \"\",colour4:\"green\",colour5:\"\"});\n      }\n      else {\n        this.setState({ colour1: \"\", colour2: \"\",colour3: \"\",colour4:\"\",colour5:\"green\"});\n      }\n    }\n  };\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>{\"HEAP SORT\"}</pre>\n          <pre className={this.state.colour1}> {\"start = (array.length / 2);\\n heapsize = array.length;\\n for(let i = start; i >= 0; i--)\\n {\\n   maxHeapify(array, i, heapsize);\\n }\"}</pre>\n          <pre className={this.state.colour2}> {\"swap(array, 0, i);\\n heapsize -= 1;\"}</pre>\n          <pre className={this.state.colour3}> {\"largest = leftChild < heapsize && array[leftChild] > array[i]? leftChild: i;\"}</pre>\n          <pre className={this.state.colour4}> {\"if (rightChild < heapsize && array[rightChild] > array[largest])\\t\\n {\\n   largest = rightChild\\n }\"}</pre>\n          <pre className={this.state.colour5}> {\"swap(array, i, largest);\"}</pre>\n        </Segment>\n        <Segment>\n          <pre>{\" Decrement the left_index = N-1 to 0 by 1 at a time\"}</pre>\n          <pre className={this.state.colour1}> {\"\\tCreating a max heap\"}</pre>\n          <pre className={this.state.colour2}> {\"\\tSwapping with last element\"}</pre>\n          <pre className={this.state.colour3}> {\"\\t\\tComparing parent and left child\"}</pre>\n          <pre className={this.state.colour4}> {\"\\t\\tComparing largest and Right child\"}</pre>\n          <pre className={this.state.colour5}> {\"\\tSwapping parent and Largest child\"}</pre>\n\n\n\n        \n        </Segment>\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;\n","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport HeapSort from './HeapSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = HeapSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Heap Sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import {\n  swap,\n  newTrace,\n  addToTrace,\n  createRange,\n} from './../helpers';\n\nconst ShellSort = (nums) => {\n  const trace = newTrace(nums);\n\n  for (\n    let gap = Math.floor(nums.length / 2);\n    gap > 0;\n    gap = Math.floor(gap / 2)\n  ) {\n    for (let j = gap; j < nums.length; j++) {\n      for (let i = j - gap; i >= 0; i -= gap) {\n        addToTrace(trace, nums, 0, [], [i, i + gap]);\n        if (nums[i + gap] < nums[i]) {\n          addToTrace(trace, nums, 1, [], [], [i, i + gap]);\n          swap(nums, i, i + gap);\n          addToTrace(trace, nums, 1, [], [], [i, i + gap]);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  addToTrace(trace, nums, -1, createRange(0, nums.length));\n  return trace;\n};\n\n\n\nexport default ShellSort;\n","import React, { Component } from 'react';\nimport './../style.css';\nimport SortChart from './../utils/SortChart/index';\nimport VisualizerControls from './../utils/VisualizerControls/index';\nimport { Segment, Input, Grid, Divider } from \"semantic-ui-react\";\n\nclass Visualizer extends Component {\n  state = {\n    trace: [],\n    traceStep: -1,\n    originalArray: [],\n    array: [],\n    groupA: [],\n    groupB: [],\n    groupC: [],\n    groupD: [],\n    sortedIndices: [],\n    timeoutIds: [],\n    value: -1,\n    color1: \"null\",\n    color2: \"null\",\n    speed: 1,\n  };\n\n  componentDidUpdate(prevProps) {\n    console.log(\"did update\", prevProps);\n    if (prevProps.array !== this.props.array) {\n      this.reset(this.props.array);\n    }\n    if (prevProps.trace !== this.props.trace) {\n      this.clearTimeouts();\n      this.setState({ trace: this.props.trace });\n    }\n  }\n\n  reset = (array) => {\n    this.setState({\n      array,\n      trace: [],\n      traceStep: -1,\n      groupA: [],\n      groupB: [],\n      groupC: [],\n      groupD: [],\n      sortedIndices: [],\n      originalArray: [...array],\n      value: -1,\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeoutIds.forEach((timeoutId) =>\n      clearTimeout(timeoutId)\n    );\n    this.setState({ timeoutIds: [] });\n  };\n\n  changeVisualState = (visualState) => {\n    this.setState({\n      array: visualState.array,\n      groupA: visualState.groupA,\n      groupB: visualState.groupB,\n      groupC: visualState.groupC,\n      groupD: visualState.groupD,\n      value: visualState.value,\n      sortedIndices: visualState.sortedIndices\n    });\n    if (Number(visualState.value) === -1) {\n      this.setState({ color1: \"null\", color2: \"null\" });\n    }\n    if (Number(visualState.value) === 0) {\n      this.setState({ color1: \"yellow\", color2: \"null\" });\n    }\n    if (Number(visualState.value) === 1) {\n      this.setState({ color1: \"null\", color2: \"grey\" });\n    }\n  };\n\n\n  changespeed = (input) => {\n    const playing = this.state.timeoutIds.length > 0;\n    this.pause();\n    const speed = Number(input);\n    if (speed > 0) {\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n    else {\n      let speed = 0.25;\n      this.setState({ speed }, () => {\n        if (playing) this.continue();\n      });\n    }\n  };\n  run = (trace) => {\n    const timeoutIds = [];\n    const timer = 500 / this.state.speed; // timer for each step\n\n    trace.forEach((item, i) => {\n      let timeoutId = setTimeout(\n        (item) => {\n          this.setState(\n            (prevState) => ({\n              traceStep: prevState.traceStep + 1\n            }),\n            this.changeVisualState(item)\n          );\n        },\n        i * timer,\n        item\n      );\n\n      timeoutIds.push(timeoutId);\n    });\n\n    let timeoutId = setTimeout(\n      this.clearTimeouts,\n      trace.length * timer\n    );\n    timeoutIds.push(timeoutId);\n\n    this.setState({ timeoutIds });\n  };\n\n  pause = () => {\n    this.clearTimeouts();\n  };\n\n  continue = () => {\n    const trace = this.state.trace.slice(this.state.traceStep);\n    this.run(trace);\n  };\n\n  stepForward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step < trace.length - 1) {\n      const item = trace[step + 1];\n      this.setState(\n        { traceStep: step + 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  stepBackward = () => {\n    const trace = this.state.trace;\n    const step = this.state.traceStep;\n    if (step > 0) {\n      const item = trace[step - 1];\n      this.setState(\n        { traceStep: step - 1 },\n        this.changeVisualState(item)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"SortVisualizer\">\n        <Grid>\n          <Grid.Row>\n            <VisualizerControls\n              onPlay={\n                this.state.traceStep === -1\n                  ? this.run.bind(this, this.state.trace)\n                  : this.continue.bind(this)\n              }\n              onPause={this.pause.bind(this)}\n              onForward={this.stepForward.bind(this)}\n              onBackward={this.stepBackward.bind(this)}\n              playing={this.state.timeoutIds.length > 0}\n            />\n            <Divider />\n            <Input value={this.state.speed} icon='time' label='Speed' size='small' labelPosition='left' type={\"number\"} step=\"0.25\" onChange={(e) => {\n              this.changespeed(e.target.value);\n            }} />\n          </Grid.Row>\n        </Grid>\n        <Segment>\n          <SortChart\n            numbers={this.state.array}\n            maxNum={Math.max(...this.state.array)}\n            groupA={this.state.groupA}\n            groupB={this.state.groupB}\n            groupC={this.state.groupC}\n            groupD={this.state.groupD}\n            sortedIndices={this.state.sortedIndices}\n          />\n        </Segment>\n        <Segment>\n          <pre>Initailise gap with N/2 and iterate this loop until gap=1 by making gap=gap/2 at each iteration</pre>\n          <pre>Iterate j with gap until N-1 by incrementing j by 1</pre>\n          <pre>Iterate i with j-gap untill i = 0 with decrementing i by gap            </pre>\n          <pre className={this.state.color1}>     Compare i+gap th and i th element\n          </pre>\n          <pre className={this.state.color2}>     if i+gap element is less than i th element swap</pre>\n          <pre>else\n          break;\n            </pre>\n        </Segment>\n\n      </div >\n    );\n  }\n}\n\nexport default Visualizer;","import React, { Component } from \"react\";\nimport { Input, Icon, Container, Button } from \"semantic-ui-react\";\nimport ShellSort from './ShellSort';\nimport Visualizer from \"./visualizer\";\nimport Navbar from '../../utils/Navbar';\nclass Sort extends Component {\n    state = {\n        array: [],\n        arraySize: 20,\n        trace: [],\n    };\n    componentDidMount() // options changed \n    {\n        this.randomize();\n    }\n    randomize = () => {\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max)) + 1;\n        }\n        const array = Array(this.state.arraySize)\n            .fill(0)\n            .map(() => getRandomInt(this.state.arraySize * 5));\n        this.setState(\n            {\n                array,\n                trace: []\n            },\n            this.createTrace\n        );\n    };\n    changesize = (size) => {\n        size = Number(size);\n        size = size > 100 ? 100 : size;\n        size = size < 0 ? 0 : size;\n        this.setState({ arraySize: size }, this.randomize);\n    };\n    createTrace = () => {\n        const numbers = [...this.state.array];\n        const trace = ShellSort(numbers);\n        this.setState({ trace });\n    };\n    render() {\n        return <Container fluid>\n            <Navbar text=\"Shell sort\" />\n            <Button color=\"green\" onClick={() => {\n                this.randomize();\n                this.createTrace();\n            }}>\n                <Icon name='random' color=\"black\" />Random\n                    </Button>\n            <Input value={this.state.arraySize} label=\"Number of bars\" labelPosition='left' type={\"number\"} onChange={(e) => {\n                this.changesize(e.target.value);\n                this.randomize();\n                this.createTrace();\n            }} />\n            <Visualizer\n                array={this.state.array}\n                trace={this.state.trace}\n            />\n        </Container>;\n    }\n}\nexport default Sort;\n","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" ></Input>\n            <Button disabled={!node} onClick={() => {\n                 const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Findnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"Node\" ></Input>\n            <Button disabled={!node} onClick={() => {\n                 const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onFind(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >{props.children}</Button>\n        </Container>\n    );\n};\nexport default Findnode;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}></Input>\n            <Button color='red' disabled={!id} onClick={() => {\n                const node={\n                    id: id,\n                    label: id,\n                }\n                try {\n                    props.onDeletenode(node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    const [start, setstart] = useState(\"1\");\n    const [time, settime] = useState(1);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n                            value={time}\n                            min={1} max={10} step={1}\n                            placeholder=\"s\" type=\"range\"\n                            onChange={(e) => settime(e.target.value)}></input>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Input value={start} placeholder=\"Start\" onChange={(e) => setstart(e.target.value)}></Input>\n            <Button\n                disabled={!start || !time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(start, time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Table, Label } from \"semantic-ui-react\";\nimport Addnode from \"./addnode\";\nimport Findnode from \"./findnode\";\nimport Deletenode from \"./deletenode\"\nimport Solve from \"./solvecontrols\";\nimport \"./BinaryTree.css\";\nimport { addedge, resetNetwork, deletenode } from \"./network\";\nimport Navbar from '../../utils/Navbar';\n\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n  nodes: [\n  ],\n  edges: [\n  ]\n};\n\nvar root = {\n  id: null,\n  children: []\n}\n\nfunction Binarytree() {\n  const ref = useRef();\n  var [data, setdata] = useState(root)\n  const [solving, setsolving] = useState(false);\n  let ColorArray = [];\n  for (let i = 0; i < 7; i++) ColorArray.push('white');\n  ColorArray[6] = 'pink';\n  const [V, setV] = useState(\"\");\n  const options = {\n    interaction: { hover: true },\n    manipulation: {\n      enabled: true,\n      addNode: false,\n      addEdge: false,\n      editEdge: true,\n      deleteNode: true,\n      deleteEdge: true,\n    },\n    layout: {\n      hierarchical: false,\n    },\n    edges: {\n      color: \"#000000\",\n      smooth: true,\n      width: 1,\n      arrows: { to: { enabled: true } },\n    },\n    // height: \"100%\",\n  };\n  var root_data = data.id\n  return (\n    <Container fluid>\n      <Navbar text=\"Binary Search Tree\" />\n      <Grid padded celled container doubling width='100hw'>\n        <Grid.Row stackable=\"true\" columns={3} divided=\"true\">\n          <Grid.Column mobile={16} computer={4}>\n            <Addnode onAddnode={async (node) => {\n              ref.current.nodes.add(node)\n              var newdata = data\n              var updata = newdata\n              var prev = newdata\n              var dir\n              while (newdata.id !== null) {\n                prev = newdata\n                ref.current.nodes.update({\n                  id: newdata.id,\n                  label: newdata.id,\n                  color: \"green\"\n                })\n                await sleep(2 * 1000)\n                resetNetwork(ref.current)\n                if (parseInt(newdata.id) > parseInt(node.id)) {\n                  let len = newdata.children.length;\n                  while (len < 2) {\n                    newdata.children.push({ id: null, children: [] })\n                    len++;\n                  }\n                  newdata = newdata.children[0];\n                  dir = \"left\";\n                }\n                else if (parseInt(newdata.id) < parseInt(node.id)) {\n                  let len = newdata.children.length;\n                  while (len < 2) {\n                    newdata.children.push({ id: null, children: [] })\n                    len++;\n                  }\n                  newdata = newdata.children[1];\n                  dir = \"right\";\n                }\n                else {\n                  break;\n                }\n              }\n              if (prev !== newdata) {\n                newdata.id = node.id\n                const edge = {\n                  from: prev.id,\n                  to: newdata.id,\n                  label: dir,\n                };\n                addedge(edge, ref.current, false);\n              }\n              if (newdata.id === null) {\n                updata = {\n                  id: node.id,\n                  children: []\n                }\n              }\n              console.log(data)\n              console.log(updata)\n              setdata(updata)\n            }} />\n          </Grid.Column>\n          <Grid.Column mobile={16} computer={6} >\n            <Findnode onFind={(node) => {\n              resetNetwork(ref.current)\n              const id_root = data.id;\n              if (id_root === null) {\n                alert(\"Node not found\");\n              }\n              else {\n                var newdata = data\n                while (newdata.id !== null) {\n                  resetNetwork(ref.current)\n                  ref.current.nodes.update({\n                    id: newdata.id,\n                    label: newdata.id,\n                    color: \"green\",\n                  })\n                  if (parseInt(newdata.id) === parseInt(node.id)) {\n                    break;\n                  }\n                  else if (parseInt(newdata.id) > parseInt(node.id)) {\n                    if (newdata.children.length !== 2) {\n                      newdata = null;\n                      break;\n                    }\n                    newdata = newdata.children[0]\n                  }\n                  else {\n                    if (newdata.children.length !== 2) {\n                      newdata = null;\n                      break;\n                    }\n                    newdata = newdata.children[1]\n                  }\n                }\n                if (newdata === null) {\n                  resetNetwork(ref.current)\n                  alert(\"Node not found\")\n                }\n              }\n            }}>Find node</Findnode>\n            <Divider />\n            <Solve\n              solving={solving}\n              time={true}\n              solve={async (start, t) => {\n                setsolving(true)\n                setV(1)\n                resetNetwork(ref.current)\n                await sleep(t * 1000)\n                const id_root = data.id;\n                if (id_root === null) {\n                  alert(\"Node not found\");\n                  setV(6)\n                }\n                else {\n                  var newdata = data\n                  while (newdata.id !== null) {\n                    resetNetwork(ref.current)\n                    ref.current.nodes.update({\n                      id: newdata.id,\n                      label: newdata.id,\n                      color: \"green\",\n                    })\n                    setV(2)\n                    await sleep(t * 1000)\n                    if (parseInt(newdata.id) === parseInt(start)) {\n                      setV(3)\n                      await sleep(t * 1000)\n                      break;\n                    }\n                    else if (parseInt(newdata.id) > parseInt(start)) {\n                      setV(4)\n                      await sleep(t * 1000)\n                      if (newdata.children.length !== 2) {\n                        newdata = null;\n                        break;\n                      }\n                      newdata = newdata.children[0]\n                    }\n                    else {\n                      setV(5)\n                      await sleep(t * 1000)\n                      if (newdata.children.length !== 2) {\n                        newdata = null;\n                        break;\n                      }\n                      newdata = newdata.children[1]\n                    }\n                  }\n                  if (newdata === null) {\n                    resetNetwork(ref.current)\n                    alert(\"Node not found\")\n                  }\n                }\n                setV(6)\n                setsolving(false)\n              }}>Step find</Solve>\n          </Grid.Column>\n          <Grid.Column computer={6} mobile={16}>\n            <Deletenode onDeletenode={(node) => {\n              const id_root = data;\n              if (id_root.id === null) {\n                alert(\"Node not found\");\n              }\n              else {\n                var newdata = data\n                var updata = newdata\n                var prev = newdata\n                var dir\n                while (newdata.id !== null) {\n                  if (parseInt(newdata.id) === parseInt(node.id)) {\n                    break;\n                  }\n                  else if (parseInt(newdata.id) > parseInt(node.id)) {\n                    if (newdata.children.length !== 2) {\n                      newdata = null;\n                      break;\n                    }\n                    prev = newdata\n                    dir = \"left\"\n                    newdata = newdata.children[0]\n                  }\n                  else {\n                    if (newdata.children.length !== 2) {\n                      newdata = null;\n                      break;\n                    }\n                    prev = newdata\n                    newdata = newdata.children[1]\n                    dir = \"right\"\n                  }\n                }\n                if (newdata === null) {\n                  alert(\"Node not found2\")\n                }\n                else {\n                  console.log(newdata)\n                  const delid = newdata.id\n                  if (newdata.children.length !== 2) {\n                    newdata.id = null\n                  }\n                  else {\n                    if (newdata.children[1].id !== null) {\n                      var tnode = newdata.children[1];\n                      var lnode = tnode\n                      while (tnode.id !== null) {\n                        lnode = tnode;\n                        if (tnode.children.length !== 2) {\n                          break;\n                        }\n                        tnode = tnode.children[0]\n                      }\n                      deletenode(lnode.id, ref.current)\n                      ref.current.nodes.add({ id: lnode.id, label: lnode.id })\n                      if (prev !== newdata) {\n                        const edge = {\n                          from: prev.id,\n                          to: lnode.id,\n                          label: dir,\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      if (newdata.children[0].id !== null && newdata.children[0].id !== lnode.id) {\n                        const edge = {\n                          from: lnode.id,\n                          to: newdata.children[0].id,\n                          label: \"left\",\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      if (newdata.children[1].id !== null && newdata.children[1].id !== lnode.id) {\n                        const edge = {\n                          from: lnode.id,\n                          to: newdata.children[1].id,\n                          label: \"right\",\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      newdata.id = lnode.id\n                      lnode.id = null\n                    }\n                    else if (newdata.children[0].id !== null) {\n                      var tenode = newdata.children[0];\n                      var lnode = tenode\n                      while (tenode.id !== null) {\n                        lnode = tenode;\n                        if (tenode.children.length !== 2) {\n                          break;\n                        }\n                        tenode = tenode.children[1]\n                      }\n                      deletenode(lnode.id, ref.current)\n                      ref.current.nodes.add({ id: lnode.id, label: lnode.id })\n                      if (prev.id !== newdata.id) {\n                        const edge = {\n                          from: prev.id,\n                          to: lnode.id,\n                          label: dir,\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      if (newdata.children[0].id !== null && newdata.children[0].id !== lnode.id) {\n                        const edge = {\n                          from: lnode.id,\n                          to: newdata.children[0].id,\n                          label: \"left\",\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      if (newdata.children[1].id !== null && newdata.children[1].id !== lnode.id) {\n                        const edge = {\n                          from: lnode.id,\n                          to: newdata.children[1].id,\n                          label: \"right\",\n                        };\n                        addedge(edge, ref.current, false);\n                      }\n                      newdata.id = lnode.id\n                      lnode.id = null\n                    }\n\n                  }\n                  deletenode(delid, ref.current)\n                  setdata(updata)\n                  console.log(data)\n                }\n              }\n            }}></Deletenode>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2} >\n          <Grid.Column computer={8} mobile={16}>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\"></link>\n            <Graph\n              style={{ height: \"80vh\" }}\n              graph={graph}\n              options={options}\n              ref={ref}\n            />\n          </Grid.Column>\n          <Grid.Column mobile={16} computer={8}><h2>The root is {root_data}</h2><Divider />\n            <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n            <Table size='small' >\n              <Table.Body >\n                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 5) % 7]} >\n                  <pre>{\"BEGIN\"}</pre>\n                </Table.Cell></Table.Row>\n                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 7]} >\n                  <pre>{\"Binarysearch (Node ,Value)\"}</pre>\n                </Table.Cell></Table.Row>\n                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 7]} >\n                  <pre>{\"\\tif(Node.value === Value)\\n\"}</pre>\n                  <pre>{\"\\t\\treturn \\\"found\\\"\\n\"}</pre>\n                </Table.Cell></Table.Row>\n                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 7]} >\n                  <pre>{\"\\telse if(Node.value > Value)\\n\"}</pre>\n                  <pre>{\"\\t\\tif(childrenof(Node)==0) return \\\"Not found\\\"\\n\"}</pre>\n                  <pre>{\"\\t\\tBinarysearch(Node.children[\\\"left\\\"],Value)\"}</pre>\n                </Table.Cell></Table.Row>\n                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 7]} >\n                  <pre>{\"\\telse \\n\"}</pre>\n                  <pre>{\"\\t\\tif(childrenof(Node)==0) return \\\"Not found\\\"\\n\"}</pre>\n                  <pre>{\"\\t\\tBinarysearch(Node.children[\\\"right\\\"],Value)\"}</pre>\n                </Table.Cell></Table.Row>\n                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 7]} >\n                  <pre>{\"END\"}</pre>\n                </Table.Cell></Table.Row>\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container >\n  );\n}\n\nexport default Binarytree;","import React from \"react\";\n\nconst ArrayTile = ({ idx, val, type ,width}) => {\n    let ArrStyle = {  width: `${width}%` };\n    console.log(\"WIDTH\",width);\n    if(type === \"binarySearch\")  return(\n    <div className=\"b-array-bar\" style={ArrStyle}>\n        {`${val}`}\n        <br/>\n        <span>{`${idx}`}</span>\n    </div>\n    );\n    else\n    {\n        return(\n        <div className=\"l-array-bar\" style={ArrStyle}>\n            {`${val}`}\n            <br/>\n            <span>{`${idx}`}</span>\n        </div>\n        );\n    }\n};\nexport default ArrayTile;\n\n","import React from \"react\";\n\nimport { randomIntFromInterval } from \"./randomIntFromInterval.js\";\nimport { binarySearchAnimations } from \"./searchingAlgorithms\";\nimport { Button, Input, Container, Header, Grid, Segment } from 'semantic-ui-react';\nimport ArrayTile from \"./arrayTile\";\nimport Navbar from '../utils/Navbar';\nimport \"./binarySearch.css\";\nlet NUMBER_OF_ARRAY_BARS = 20;\nconst DEFAULT_COLOR = \"#6376f1\";\nconst FOUND_COLOR = \"#28B463\";\nconst NOT_FOUND_COLOR = \"#F16388\";\nconst ANIMATION_SPEED_SECONDS = 2;\n\nexport default class BinarySearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            found: false,\n            disabled: false,\n            elementFoundAt: 0,\n            target: null,\n            msgAfterExecution: null,\n            previousLength: 0,\n            animations: [],\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    resetArray() {\n        let array = [];\n        const prevArray = document.getElementsByClassName(\"b-array-bar\");\n        document.getElementById(\"binarySearchTargetVal\").value = \"\";\n        for (let idx = 0; idx < prevArray.length; idx++) {\n            prevArray[idx].style.backgroundColor = DEFAULT_COLOR;\n            prevArray[idx].classList.remove(\"growFind\");\n            prevArray[idx].classList.remove(\"highlight\");\n        }\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(1, 10000));\n        }\n        let sortedArray = array.slice().sort((a, b) => a - b);\n        this.setState({\n            array: sortedArray,\n            found: false,\n            disabled: false,\n            msgAfterExecution: null,\n            previousLength: this.state.animations.length,\n        });\n    }\n\n    hightlightWithinBounds(start, end, arrayTiles) {\n        for (let i = start; i <= end; i++) {\n            arrayTiles[i].style.backgroundColor = NOT_FOUND_COLOR;\n            arrayTiles[i].style.transition = \"100ms all\";\n        }\n    }\n\n    resetAllTiles(arrayTiles) {\n        for (let i = 0; i < arrayTiles.length; i++) {\n            arrayTiles[i].style.backgroundColor = DEFAULT_COLOR;\n            arrayTiles[i].style.transition = \"100ms all\";\n        }\n    }\n\n    binarySearch() {\n        const { array } = this.state;\n        const animations = [];\n        let count = 0;\n        const arrayTiles = document.getElementsByClassName(\"b-array-bar\");\n        const target = document.getElementById(\"binarySearchTargetVal\").value;\n        if (target === \"\") return;\n        binarySearchAnimations(\n            array,\n            0,\n            array.length - 1,\n            parseInt(target),\n            animations\n        );\n\n        for (let k = 0; k < animations.length; k++) {\n            const [left, right, mid, found] = animations[k];\n            count++;\n\n            if (k === animations.length - 1 && found) {\n                setTimeout(() => {\n                    this.setState({ disabled: true, found: true });\n                    this.resetAllTiles(arrayTiles);\n                    arrayTiles[mid].classList.add(\"highlight\");\n                    arrayTiles[mid].style.backgroundColor = FOUND_COLOR;\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\n            }\n\n            if (left === 0 && right === 0 && mid === 0 && !found) {\n                setTimeout(() => {\n                    console.log(\"ELement not found\");\n                    this.setState({\n                        msgAfterExecution: `Element not found`,\n                        found: false,\n                    });\n                    this.resetAllTiles(arrayTiles);\n                }, (k + 1) * ANIMATION_SPEED_SECONDS * 1000);\n            }\n\n            setTimeout(() => {\n                this.setState({ disabled: true });\n                this.resetAllTiles(arrayTiles);\n                this.hightlightWithinBounds(left, right, arrayTiles);\n            }, k * 1000 * ANIMATION_SPEED_SECONDS);\n        }\n\n        setTimeout(() => {\n            this.setState({ disabled: false });\n        }, count * 1000 * ANIMATION_SPEED_SECONDS);\n    }\n\n    render() {\n        const { array, found, disabled, msgAfterExecution } = this.state;\n\n        return (\n            <Container fluid>\n                <Navbar text=\"Binary Search\" />\n                <Grid textAlign={\"center\"}>\n                    <Grid.Row>\n                        <Header as='h2'> Binary Search</Header>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Segment.Group horizontal>\n                            <Segment>\n                                <Input fluid={true}\n                                    type={\"number\"}\n                                    id=\"binarySearchTargetVal\"\n                                    // className=\"form-control\"\n                                    label={\"Search for\"}\n                                // placeholder=\"Search for\"\n                                />\n                            </Segment>\n                            <Segment>\n                                <div className=\"input-group-append\">\n                                    <Button\n                                        color={\"green\"}\n                                        onClick={() => this.binarySearch()}\n                                        className=\"btn btn-success\"\n                                        type=\"button\"\n                                        id=\"binarySearchBtn\"\n                                        disabled={disabled}\n                                    >\n                                        Search\n                                    </Button>\n                                </div>\n                            </Segment>\n                            <Segment>\n                                <Input fluid={true}\n                                    type={\"number\"}\n                                    label={\"Array size\"}\n                                    placeholder={NUMBER_OF_ARRAY_BARS}\n                                    onChange={(e) => {\n                                        NUMBER_OF_ARRAY_BARS = e.target.value;\n                                        console.log(\"NUM\", NUMBER_OF_ARRAY_BARS, 1000 / NUMBER_OF_ARRAY_BARS);\n                                        this.resetArray();\n                                    }} />\n                            </Segment>\n                            <Segment>\n                                <Button\n                                    onClick={() => this.resetArray()}\n                                    className=\"btn btn-danger\"\n                                    id=\"binarySearchResetArray\"\n                                    type=\"button\"\n                                    color={\"red\"}\n                                    disabled={disabled}\n                                >\n                                    Reset Array\n                                </Button>\n                            </Segment>\n                        </Segment.Group>\n                    </Grid.Row>\n                </Grid>\n                {!found ? (\n                    <p className=\"not-found\" style={{ fontSize: 30 }}>{msgAfterExecution}</p>\n                ) : null}\n                <br />\n                {array.map((value, idx) => (\n                    <ArrayTile\n                        type={\"binarySearch\"}\n                        key={idx}\n                        idx={idx}\n                        val={value}\n                        width={4}\n                    />\n                ))}\n            </Container>\n        );\n    }\n}\n","export function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function binarySearchAnimations(\n    array,\n    left,\n    right,\n    element,\n    animations = []\n) {\n    if (right >= left) {\n        let mid = parseInt(left + (right - left) / 2);\n        if (array[mid] === element) {\n            animations.push([left, right, mid, true]);\n            return true;\n        }\n        if (array[mid] > element) {\n            animations.push([left, right, mid, false]);\n            binarySearchAnimations(array, left, mid - 1, element, animations);\n        } else {\n            animations.push([left, right, mid, false]);\n            binarySearchAnimations(array, mid + 1, right, element, animations);\n        }\n        return false;\n    }\n}\n","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n\n                    props.onAddedge(edge);\n                }}\n            >\n                Add Edge\n        </Button>\n        </Container >\n    );\n};\nexport default Addedge;","import React, { useState } from \"react\";\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Addnode = (props) => {\n    const [node, setnode] = useState();\n    return (\n        <Container>\n            <Input onChange={(e) => setnode(e.target.value)} placeholder=\"node\" ></Input>\n            <Button disabled={!node} onClick={() => {\n                const Node = {\n                    id: node,\n                    label: node,\n                };\n                try {\n                    props.onAddnode(Node);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} color=\"green\" >Add node</Button>\n        </Container>\n    );\n};\nexport default Addnode;","import React, { useState } from \"react\"\nimport { Input, Button, Container } from \"semantic-ui-react\";\n\nconst Deleteedge = (props) => {\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [w, setW] = useState(\"\");\n    return (\n        <Container>\n            <Input\n                value={from}\n                onChange={(e) => setFrom(e.target.value)}\n                placeholder=\"From\"\n            ></Input>\n            <Input\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"To\"\n            ></Input>\n            <Input\n                value={w}\n                onChange={(e) => setW(e.target.value)}\n                placeholder=\"Capacity\"\n                type=\"number\"\n            ></Input>\n            <Button\n                disabled={!from || !to | !w | w < 0}\n                onClick={() => {\n                    const edge = {\n                        from: from,\n                        to: to,\n                        label: w,\n                    };\n                    props.onDeleteedge(edge);\n                }}\n            >\n                Delete Edge\n        </Button>\n        </Container>\n    );\n};\nexport default Deleteedge;","import React from \"react\";\nimport { useState } from \"react\";\nimport { Container, Input, Button } from \"semantic-ui-react\";\n\nconst Deletenode = (props) => {\n    const [id, setid] = useState(\"\");\n    return (\n        <Container>\n            <Input value={id} placeholder=\"node\" onChange={(e) => setid(e.target.value)}></Input>\n            <Button color='red' disabled={!id} onClick={() => {\n                try {\n                    props.onDeletenode(id);\n                }\n                catch (e) {\n                    alert(e.message);\n                }\n            }} >Delete node</Button>\n        </Container>\n    );\n};\nexport default Deletenode;","import React, { useState } from \"react\";\nimport { Container, Button } from \"semantic-ui-react\";\n\nconst Solve = (props) => {\n    // const [start, setstart] = useState(\"1\");\n    const [time, settime] = useState(1);\n    return (\n        <Container>\n            {\n                props.time && (\n                    <>\n                        <input\n                            value={time}\n                            min={1} max={10} step={1}\n                            placeholder=\"s\" type=\"range\"\n                            onChange={(e) => settime(e.target.value)}></input>\n                        <span className=\"mr-3\" >{time} s</span>\n                    </>\n                )\n            }\n            <Button\n                disabled={!time || props.solving}\n                color=\"green\" loading={props.solving}\n                onClick={(e) => !props.solving && props.solve(time)}>\n                {props.children}</Button>\n        </Container>\n    );\n};\nexport default Solve;","class Node {\n    constructor(value, distance) {\n        this.value = value\n        this.distance = distance\n    }\n}\n\nclass PriorityQueue {\n\n    constructor() {\n        this.values = []\n    }\n\n    //helper method that swaps the values and two indexes of an array\n    swap(index1, index2) {\n        let temp = this.values[index1];\n        this.values[index1] = this.values[index2];\n        this.values[index2] = temp;\n        return this.values;\n    }\n    //helper methods that bubbles up values from end\n    bubbleUp() {\n        //get index of inserted element\n        let index = this.values.length - 1\n        //loop while index is not 0 or element no loger needs to bubble\n        while (index > 0) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    // method that pushes new value onto the end and calls the bubble helper\n    enqueue(value) {\n        this.values.push(value)\n        //calculate parent, if parent is greater swap\n        //while loop or recurse\n        this.bubbleUp();\n        return this.values\n    }\n    bubbleDown() {\n        let parentIndex = 0;\n        const length = this.values.length;\n        const elementPriority = this.values[0].distance;\n        //loop breaks if no swaps are needed\n        while (true) {\n            //get indexes of child elements by following formula\n            let leftChildIndex = (2 * parentIndex) + 1;\n            let rightChildIndex = (2 * parentIndex) + 2;\n            let leftChildPriority, rightChildPriority;\n            let indexToSwap = null;\n            // if left child exists, and is greater than the element, plan to swap with the left child index\n            if (leftChildIndex < length) {\n                leftChildPriority = this.values[leftChildIndex].distance\n                if (leftChildPriority < elementPriority) {\n                    indexToSwap = leftChildIndex;\n                }\n            }\n            //if right child exists\n            if (rightChildIndex < length) {\n                rightChildPriority = this.values[rightChildIndex].distance\n\n                if (\n                    //if right child is greater than element and there are no plans to swap\n                    (rightChildPriority < elementPriority && indexToSwap === null) ||\n                    //OR if right child is greater than left child and there ARE plans to swap\n                    (rightChildPriority < leftChildPriority && indexToSwap !== null)) {\n                    //plan to swap with the right child\n                    indexToSwap = rightChildIndex\n                }\n            }\n            //if there are no plans to swap, break out of the loop\n            if (indexToSwap === null) {\n                break;\n            }\n            //swap with planned element\n            this.swap(parentIndex, indexToSwap);\n            //starting index is now index that we swapped with\n            parentIndex = indexToSwap;\n        }\n    }\n    has(id) {\n        for (let i = 0; i < this.values.length; i++) {\n            // console.log(\"has check\", this.values[i], node);\n            if (this.values[i].value === id) return true;\n        }\n        return false;\n    }\n    replace(node, dist) {\n        let index = -1;\n        for (let i = 0; i < this.values.length; i++) {\n            if (this.values[i].value === node) { index = i; break };\n        }\n        console.log(\"array pq\", this.values, node);\n        if (index < 0) return -1;\n        this.values[index].distance = dist;\n        while (index > 0) {\n            //get parent index via formula\n            let parentIndex = Math.floor((index - 1) / 2);\n            //if values is greater than parent, swap the two\n            if (this.values[parentIndex].distance > this.values[index].distance) {\n                //swap with helper method\n                this.swap(index, parentIndex);\n                //change current index to parent index\n                index = parentIndex;\n            } else {\n                break;\n            }\n        }\n        return 0;\n    }\n    dequeue() {\n        //swap first and last element\n        this.swap(0, this.values.length - 1);\n        //pop max value off of values\n        let poppedNode = this.values.pop();\n        //re-adjust heap if length is greater than 1\n        if (this.values.length > 1) {\n            this.bubbleDown();\n        }\n\n        return poppedNode;\n    }\n}\nexport { PriorityQueue, Node };","import { PriorityQueue, Node } from './priorityqueue';\n\n\n\n\nexport class UnionFind {\n    constructor(elements) {\n       // Number of disconnected components\n       this.count = elements.length;\n \n       // Keep Track of connected components\n       this.parent = {};\n \n       // Initialize the data structure such that all\n       // elements have themselves as parents\n       elements.forEach(e => (this.parent[parseInt(e)] = parseInt(e)));\n    }\n \n    union(a, b) {\n       let rootA = this.find(a);\n       let rootB = this.find(b);\n \n       // Roots are same so these are already connected.\n       if (parseInt(rootA) === parseInt(rootB)) return;\n \n       // Always make the element with smaller root the parent.\n       if (parseInt(rootA)< parseInt(rootB)) {\n          if (this.parent[b] !== b) this.union(this.parent[b], a);\n          this.parent[b] = this.parent[a];\n       } else {\n          if (this.parent[a] !== a) this.union(this.parent[a], b);\n          this.parent[a] = this.parent[b];\n       }\n    }\n \n    // Returns final parent of a node\n    find(a) {\n       while (this.parent[a] !== a) {\n          a = this.parent[a];\n       }\n       return a;\n    }\n \n    // Checks connectivity of the 2 nodes\n    connected(a, b) {\n       return this.find(a) === this.find(b);\n    }\n }\n\nexport function solvePrims(nodes, edges, network) {\n    console.log(edges)\n    let edgeQueue = new PriorityQueue()\n    for (let node in edges) {\n        edgeQueue.enqueue(new Node([edges[node].from, edges[node].to,edges[node].id], parseInt(edges[node].label)));\n     }\n     let node_ids = []\n     for(let node in nodes){\n        console.log(nodes[node])\n        node_ids.push(nodes[node].id)\n     }\n     let uf = new UnionFind(node_ids);\n     // Loop until either we explore all nodes or queue is empty\n     while (edgeQueue.values.length>=1) {\n        // Get the edge data using destructuring\n        let nextEdge = edgeQueue.dequeue();\n        //console.log(nextEdge)\n        let nodes_pq = nextEdge.value\n        //console.log(nodes_pq)\n         console.log(uf)\n         \n        if (!uf.connected(nodes_pq[0], nodes_pq[1])) {\n            console.log(\"Entered\")\n            network.edges.update({\n               id:nodes_pq[2],\n               from: nodes_pq[0],\n               to: nodes_pq[1],\n               color : \"blue\",\n               width : 3,\n            })\n            network.nodes.update({\n               id: nodes_pq[0],\n               label: nodes_pq[0],\n               color: \"green\"\n            })\n            network.nodes.update({\n               id: nodes_pq[1],\n               label: nodes_pq[1],\n               color: \"green\"\n            })\n           uf.union(parseInt(nodes_pq[0]), parseInt(nodes_pq[1]));\n           console.log(uf)\n        }\n     }\n  \n}\n","export function resetNetwork(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n    network.edges.forEach((edge) => {\n        network.edges.update({\n            ...edge,\n            color: null,\n            width: null,\n        });\n    });\n}\nexport function resetNetwork_nodes(network) {\n    network.nodes.forEach((node) => {\n        network.nodes.update({\n            id: node.id,\n            label: node.id,\n            color: null,\n        });\n    });\n}\n\nexport function addedge(edge, network, bi = false) {\n    let a = 0, b = 0;\n    network.nodes.forEach((node) => {\n        if (node.id === edge.from) a = 1;\n        if (node.id === edge.to) b = 1;\n    });\n    if (a === 1 && b === 1) {\n        network.edges.add(edge);\n    }\n    else {\n        if (!a && !b) alert(\"both nodes \" + edge.from + \", \" + edge.to + \" not found in the graph\");\n        else if (!a)\n            alert(\"node \" + edge.from + \" not found in the graph\");\n        else if (!b) alert(\"node \" + edge.to + \" not found in the graph\");\n    }\n    return;\n}\n\nexport function deleteedge(edge, network, bi) {\n    let bool = 0;\n    network.edges.forEach((ed) => {\n        if (ed.from === edge.from && ed.to === edge.to && ed.label === edge.label) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n        else if (bi && (ed.to === edge.from && ed.to === edge.from && ed.label === edge.label)) {\n            network.edges.remove(ed);\n            bool = 1;\n        }\n    });\n    if (bool) return;\n    if (bi) {\n        alert(\"No edge in between\" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    else {\n        alert(\"No edge from \" + edge.from + \" to \" + edge.to + \" with weight \" + edge.label);\n    }\n    return;\n}\n\nexport function deletenode(id, network) {\n    network.edges.forEach((ed) => {\n        if (ed.from === id || ed.to === id) {\n            network.edges.remove(ed);\n        }\n    });\n    let a = network.nodes.remove({ id: id });\n    console.log(a.length);\n    if (a.length === 0) {\n        alert(\"node \" + id + \" does not exist\");\n    }\n}","import React, { useRef, useState } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport { Container, Grid, Divider, Table, Label } from \"semantic-ui-react\";\nimport Addedge from \"./addedge\";\nimport Addnode from \"./node\";\nimport Deleteedge from \"./deleteedge\";\nimport Deletenode from \"./delete\"\nimport Solve from \"./solve\";\nimport \"./kruskals.css\";\nimport Navbar from '../../utils/Navbar';\nimport { solvePrims, UnionFind } from \"./solvekrushkal\";\nimport { addedge, deleteedge, deletenode, resetNetwork } from \"./network\";\nimport { PriorityQueue, Node } from './priorityqueue';\n\nexport function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst graph = {\n    nodes: [\n        { id: \"2\", label: \"2\" },\n        { id: \"3\", label: \"3\" },\n        { id: \"1\", label: \"1\" },\n        { id: \"4\", label: \"4\" },\n        { id: \"5\", label: \"5\" },\n    ],\n    edges: [\n        { from: \"1\", to: \"2\", label: \"6\" },\n        { from: \"1\", to: \"4\", label: \"1\" },\n        { from: \"2\", to: \"4\", label: \"2\" },\n        { from: \"2\", to: \"5\", label: \"1\" },\n        { from: \"3\", to: \"2\", label: \"5\" },\n        { from: \"4\", to: \"5\", label: \"1\" },\n        { from: \"5\", to: \"3\", label: \"5\" },\n        { from: \"5\", to: \"2\", label: \"2\" },\n    ]\n};\n\nfunction Kruskals() {\n    const ref = useRef();\n    const [solving, setsolving] = useState(false);\n    let ColorArray = [];\n    for (let i = 0; i < 8; i++) ColorArray.push('white');\n    ColorArray[7] = 'pink';\n    const [V, setV] = useState(\"\");\n    const options = {\n        interaction: { hover: true },\n        manipulation: {\n            enabled: true,\n            addNode: false,\n            addEdge: false,\n            editEdge: true,\n            deleteNode: true,\n            deleteEdge: true,\n        },\n        layout: {\n            hierarchical: false,\n        },\n        edges: {\n            color: \"#000000\",\n            smooth: true,\n            width: 1,\n            arrows: { to: { enabled: false } },\n        },\n        // height: \"100%\",\n    };\n\n    return (\n        <Container fluid >\n            <Navbar text=\"Krushkal's algorithm\" />\n            <Grid padded celled container doubling width='100hw'>\n                <Grid.Row stackable=\"true\" columns={3} divided=\"true\">\n                    <Grid.Column mobile={16} computer={4}>\n                        <Addnode onAddnode={(node) => {\n                            ref.current.nodes.add(node);\n                            console.log(ref.current);\n                        }} />\n                        <Divider />\n                        <Deletenode onDeletenode={(id) => { deletenode(id, ref.current); }} />\n\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={6} >\n                        <Addedge onAddedge={(edge) => { addedge(edge, ref.current, false); }} />\n                        <Divider />\n                        <Deleteedge onDeleteedge={(edge) => {\n                            deleteedge(edge, ref.current);\n                        }} />\n                        {/* <Divider /> */}\n                    </Grid.Column>\n                    <Grid.Column computer={6} mobile={16}>\n                        <Solve solving={solving} solve={(start) => {\n                            setsolving(true);\n                            resetNetwork(ref.current);\n                            solvePrims(\n                                ref.current.nodes.get(),\n                                ref.current.edges.get(),\n                                ref.current, 0\n                            );\n                            setsolving(false);\n                        }} >Kruskals</Solve>\n                        <Divider />\n                        <Solve\n                            solving={solving}\n                            time={true}\n                            solve={async (t) => {\n                                setsolving(true);\n                                // console.log(\"EDGES\", ref.current.edges, ref.current.edges.get());\n                                setV(1);\n                                resetNetwork(ref.current);\n                                await sleep(t * 1000)\n                                const nodes = ref.current.nodes.get()\n                                const edges = ref.current.edges.get()\n                                const network = ref.current\n                                let edgeQueue = new PriorityQueue()\n                                console.log(edges)\n                                for (let node in edges) {\n                                    edgeQueue.enqueue(new Node([edges[node].from, edges[node].to, edges[node].id], parseInt(edges[node].label)));\n                                }\n                                let node_ids = []\n                                for (let node in nodes) {\n                                    console.log(nodes[node])\n                                    node_ids.push(nodes[node].id)\n                                }\n                                let uf = new UnionFind(node_ids);\n                                setV(2)\n                                await sleep(t * 1000)\n                                // Loop until either we explore all nodes or queue is empty\n                                while (edgeQueue.values.length >= 1) {\n                                    // Get the edge data using destructuring\n                                    let nextEdge = edgeQueue.dequeue();\n                                    //console.log(nextEdge)\n                                    let nodes_pq = nextEdge.value\n                                    //console.log(nodes_pq)\n                                    console.log(uf)\n                                    setV(3)\n                                    network.edges.update({\n                                        id: nodes_pq[2],\n                                        from: nodes_pq[0],\n                                        to: nodes_pq[1],\n                                        color: \"red\",\n                                        width: 3,\n                                    })\n                                    await sleep(t * 1000)\n                                    network.edges.update({\n                                        id: nodes_pq[2],\n                                        from: nodes_pq[0],\n                                        to: nodes_pq[1],\n                                        color: \"black\",\n                                        width: 1,\n                                    })\n                                    if (!uf.connected(nodes_pq[0], nodes_pq[1])) {\n                                        console.log(\"Entered\")\n                                        setV(4)\n                                        await sleep(t * 1000)\n                                        network.edges.update({\n                                            id: nodes_pq[2],\n                                            from: nodes_pq[0],\n                                            to: nodes_pq[1],\n                                            color: \"blue\",\n                                            width: 3,\n                                        })\n                                        network.nodes.update({\n                                            id: nodes_pq[0],\n                                            label: nodes_pq[0],\n                                            color: \"green\"\n                                        })\n                                        network.nodes.update({\n                                            id: nodes_pq[1],\n                                            label: nodes_pq[1],\n                                            color: \"green\"\n                                        })\n                                        setV(5)\n                                        await sleep(t * 1000)\n                                        uf.union(parseInt(nodes_pq[0]), parseInt(nodes_pq[1]));\n                                        console.log(uf)\n                                        setV(6)\n                                        await sleep(t * 1000)\n                                    }\n                                }\n                                setsolving(false);\n                                setV(7)\n                                await sleep(t * 1000)\n                            }\n                            }\n                        >Kruskals steps</Solve>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row columns={2} >\n                    <Grid.Column computer={8} mobile={16}>\n                        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/vis/4.19.1/vis-network.min.css\"></link>\n                        <Graph\n                            style={{ height: \"80vh\" }}\n                            graph={graph}\n                            options={options}\n                            ref={ref}\n                        />\n                    </Grid.Column>\n                    <Grid.Column mobile={16} computer={8}>\n                        <Table.Row size='small'><Table.Cell><Label ribbon color='green'>PSEUDO CODE</Label></Table.Cell></Table.Row>\n                        <Table size='small' >\n                            <Table.Body >\n                                <Table.Row textAlign='left'><Table.Cell height='5' bgcolor={ColorArray[(V + 7) % 8]} >\n                                    <pre>{\"BEGIN\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 6) % 8]} >\n                                    <pre>{\"setsDisjoint = new Disjoint(nodes)\"}</pre>\n                                    <pre>{\"queue = new PriorityQueue(edges)\"}</pre>\n                                    <pre>{\"MST = []\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 5) % 8]} >\n                                    <pre>{\"while queue ≠ ∅\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 4) % 8]} >\n                                    <pre>{\"\\tU = queue.min()\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 3) % 8]} >\n                                    <pre>{\"\\tif(!setsDisjoint.notConnected(U.from,U.to))\\n\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 2) % 8]} >\n                                    <pre>{\"\\t\\tMST.push(U)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                < Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V + 1) % 8]} >\n                                    <pre>{\"\\t\\tsetsDisjoint.union(U.from,U.to)\"}</pre>\n                                </Table.Cell></Table.Row>\n                                <Table.Row textAlign='left'><Table.Cell bgcolor={ColorArray[(V) % 8]} ><pre>{\"END\"}</pre> </Table.Cell></Table.Row>\n                            </Table.Body>\n                        </Table>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Container >\n    );\n}\n\nexport default Kruskals;\n","import React from 'react';\nimport Index from './utils/index'\nimport { Route } from 'react-router-dom';\nimport Dijkstra from './graphalgorithms/dijkstra/dijkstra';\nimport Prims from './graphalgorithms/prims/prims';\nimport Dfs from './graphalgorithms/dfs/dfs';\nimport Bfs from './graphalgorithms/bfs/bfs';\nimport BubbleSort from './sortingalgorithms/bubblesort/sort';\nimport SelectionSort from './sortingalgorithms/selectionsort/sort';\nimport InsertionSort from './sortingalgorithms/insertionsort/sort';\nimport MergeSort from './sortingalgorithms/mergesort/sort';\nimport QuickSort from './sortingalgorithms/quicksort/sort';\nimport QuickSort3 from './sortingalgorithms/quicksort3/sort';\nimport HeapSort from './sortingalgorithms/heapsort/sort';\nimport ShellSort from './sortingalgorithms/shellsort/sort';\nimport binarysearchtree from './graphalgorithms/Binarytree/BinaryTree';\nimport binarySearch from \"./binarySearch/binarySearch\";\nimport './App.css';\nimport Kruskals from './graphalgorithms/kruskals/kruskals';\n\nexport default function App() {\n  return (\n    <>\n      <Route exact path=\"/\" component={Index} />\n      <Route path=\"/dijkstra\" component={Dijkstra} />\n      <Route path=\"/prims\" component={Prims} />\n      <Route path=\"/dfs\" component={Dfs} />\n      <Route path=\"/bfs\" component={Bfs} />\n      <Route path=\"/binarysearch\" component={binarySearch} />\n      <Route path=\"/binarysearchtree\" component={binarysearchtree} />\n      <Route path=\"/krushkal\" component={Kruskals} />\n      <Route path=\"/bubblesort\" component={BubbleSort} />\n      <Route path=\"/selectionsort\" component={SelectionSort} />\n      <Route path=\"/insertionsort\" component={InsertionSort} />\n      <Route path=\"/mergesort\" component={MergeSort} />\n      <Route path=\"/quicksort\" component={QuickSort} />\n      <Route path=\"/quicksort3\" component={QuickSort3} />\n      <Route path=\"/shellsort\" component={ShellSort} />\n      <Route path=\"/heapsort\" component={HeapSort} />\n\n    </>\n  );\n}\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}